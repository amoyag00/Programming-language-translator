
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package procesadores;

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\004\006\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\010\010\000\002\011" +
    "\005\000\002\011\002\000\002\012\007\000\002\013\004" +
    "\000\002\013\003\000\002\014\017\000\002\015\006\000" +
    "\002\015\004\000\002\015\002\000\002\016\005\000\002" +
    "\016\004\000\002\017\011\000\002\020\012\000\002\021" +
    "\006\000\002\021\002\000\002\022\003\000\002\022\005" +
    "\000\002\023\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\005\000\002\024\006\000\002\024\006\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\006\000" +
    "\002\027\003\000\002\027\010\000\002\027\006\000\002" +
    "\027\003\000\002\027\003\000\002\030\005\000\002\030" +
    "\010\000\002\030\007\000\002\031\005\000\002\031\003" +
    "\000\002\031\005\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\005\000\002\034\005\000\002\034" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\003" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\022\005\ufffd\006\ufffd\016\004\017\013\020" +
    "\016\021\010\022\005\054\006\001\002\000\006\045\ufffa" +
    "\061\ufffa\001\002\000\006\045\ufff6\061\ufff6\001\002\000" +
    "\004\011\236\001\002\000\004\002\235\001\002\000\006" +
    "\045\ufff7\061\ufff7\001\002\000\006\045\ufff5\061\ufff5\001" +
    "\002\000\004\061\227\001\002\000\006\045\ufff9\061\ufff9" +
    "\001\002\000\006\005\217\006\ufff1\001\002\000\004\006" +
    "\017\001\002\000\006\045\ufff8\061\ufff8\001\002\000\004" +
    "\015\022\001\002\000\006\002\uffee\015\022\001\002\000" +
    "\004\002\001\001\002\000\016\016\004\017\013\020\016" +
    "\021\010\022\005\054\006\001\002\000\004\061\025\001" +
    "\002\000\004\061\ufff4\001\002\000\004\011\026\001\002" +
    "\000\020\012\uffea\016\004\017\013\020\016\021\010\022" +
    "\005\054\006\001\002\000\004\012\034\001\002\000\004" +
    "\061\031\001\002\000\006\012\uffeb\045\032\001\002\000" +
    "\020\012\uffea\016\004\017\013\020\016\021\010\022\005" +
    "\054\006\001\002\000\004\012\uffec\001\002\000\004\007" +
    "\035\001\002\000\032\005\ufffd\016\004\017\013\020\016" +
    "\021\010\022\005\042\ufffd\043\ufffd\052\ufffd\053\ufffd\054" +
    "\006\061\ufffd\001\002\000\016\005\043\042\041\043\046" +
    "\052\037\053\051\061\050\001\002\000\004\011\210\001" +
    "\002\000\004\004\uffcd\001\002\000\004\011\202\001\002" +
    "\000\004\004\uffd1\001\002\000\004\061\200\001\002\000" +
    "\004\051\174\001\002\000\004\004\uffce\001\002\000\004" +
    "\011\143\001\002\000\004\004\141\001\002\000\012\011" +
    "\110\013\111\023\112\046\107\001\002\000\004\011\053" +
    "\001\002\000\004\004\uffd3\001\002\000\020\047\057\050" +
    "\061\055\065\056\056\057\064\060\060\061\062\001\002" +
    "\000\004\012\106\001\002\000\006\012\uffbe\045\104\001" +
    "\002\000\046\004\uffb8\012\uffb8\014\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\045\uffb8" +
    "\001\002\000\046\004\uffb5\012\uffb5\014\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\045" +
    "\uffb5\001\002\000\046\004\uffb6\012\uffb6\014\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\045\uffb6\001\002\000\046\004\uffb4\012\uffb4\014\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\045\uffb4\001\002\000\054\004\uffe0\011\067\012\uffe0" +
    "\013\070\014\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\045\uffe0\046\066\001\002\000" +
    "\046\004\uffdf\012\uffdf\014\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\045\uffdf\001\002" +
    "\000\046\004\uffb7\012\uffb7\014\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\045\uffb7\001" +
    "\002\000\046\004\uffb9\012\uffb9\014\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\045\uffb9" +
    "\001\002\000\004\061\103\001\002\000\020\047\057\050" +
    "\061\055\065\056\056\057\064\060\060\061\074\001\002" +
    "\000\020\047\057\050\061\055\065\056\056\057\064\060" +
    "\060\061\062\001\002\000\004\014\072\001\002\000\046" +
    "\004\uffdc\012\uffdc\014\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\045\uffdc\001\002\000" +
    "\004\012\102\001\002\000\006\012\uffbb\045\100\001\002" +
    "\000\006\012\uffba\045\076\001\002\000\020\047\057\050" +
    "\061\055\065\056\056\057\064\060\060\061\074\001\002" +
    "\000\004\012\uffbc\001\002\000\020\047\057\050\061\055" +
    "\065\056\056\057\064\060\060\061\074\001\002\000\004" +
    "\012\uffbd\001\002\000\046\004\uffdd\012\uffdd\014\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\045\uffdd\001\002\000\046\004\uffde\012\uffde\014\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\045\uffde\001\002\000\020\047\057\050\061\055" +
    "\065\056\056\057\064\060\060\061\062\001\002\000\004" +
    "\012\uffbf\001\002\000\004\004\uffcf\001\002\000\004\061" +
    "\136\001\002\000\020\047\057\050\061\055\065\056\056" +
    "\057\064\060\060\061\074\001\002\000\020\047\057\050" +
    "\061\055\065\056\056\057\064\060\060\061\062\001\002" +
    "\000\022\011\113\047\057\050\061\055\065\056\056\057" +
    "\064\060\060\061\062\001\002\000\022\011\113\047\057" +
    "\050\061\055\065\056\056\057\064\060\060\061\062\001" +
    "\002\000\022\004\uffc8\012\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\001\002\000\020\004\uffcc\034" +
    "\122\035\123\036\124\037\116\040\117\041\121\001\002" +
    "\000\020\047\uffc3\050\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\001\002\000\020\047\uffc1\050\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002\000\020\047" +
    "\057\050\061\055\065\056\056\057\064\060\060\061\062" +
    "\001\002\000\020\047\uffc4\050\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\061\uffc4\001\002\000\020\047\uffc6\050\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\001\002\000" +
    "\020\047\uffc5\050\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\001\002\000\020\047\uffc2\050\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\001\002\000\022\004\uffc9" +
    "\012\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\001\002\000\020\012\127\034\122\035\123\036\124" +
    "\037\116\040\117\041\121\001\002\000\022\004\uffc7\012" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\001\002\000\004\014\131\001\002\000\004\023\132\001" +
    "\002\000\022\011\113\047\057\050\061\055\065\056\056" +
    "\057\064\060\060\061\062\001\002\000\020\004\uffcb\034" +
    "\122\035\123\036\124\037\116\040\117\041\121\001\002" +
    "\000\004\012\135\001\002\000\004\004\uffd2\001\002\000" +
    "\004\023\137\001\002\000\022\011\113\047\057\050\061" +
    "\055\065\056\056\057\064\060\060\061\062\001\002\000" +
    "\020\004\uffca\034\122\035\123\036\124\037\116\040\117" +
    "\041\121\001\002\000\022\005\043\010\uffe8\042\041\043" +
    "\046\051\uffe8\052\037\053\051\061\050\001\002\000\006" +
    "\010\uffe9\051\uffe9\001\002\000\020\047\057\050\061\055" +
    "\065\056\056\057\064\060\060\061\062\001\002\000\016" +
    "\024\171\025\166\026\170\027\164\030\172\031\167\001" +
    "\002\000\010\012\uffe3\032\160\033\162\001\002\000\004" +
    "\012\147\001\002\000\004\007\150\001\002\000\016\005" +
    "\043\042\041\043\046\052\037\053\051\061\050\001\002" +
    "\000\004\010\152\001\002\000\006\004\uffe4\044\153\001" +
    "\002\000\004\007\155\001\002\000\004\004\uffe6\001\002" +
    "\000\016\005\043\042\041\043\046\052\037\053\051\061" +
    "\050\001\002\000\004\010\157\001\002\000\004\004\uffe5" +
    "\001\002\000\020\047\uffd5\050\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\001\002\000\020\047\057\050\061" +
    "\055\065\056\056\057\064\060\060\061\062\001\002\000" +
    "\020\047\uffd4\050\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\001\002\000\004\012\uffe2\001\002\000\020\047" +
    "\uffda\050\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\001\002\000\020\047\057\050\061\055\065\056\056\057" +
    "\064\060\060\061\062\001\002\000\020\047\uffd6\050\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\001\002\000" +
    "\020\047\uffd8\050\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\001\002\000\020\047\uffdb\050\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\001\002\000\020\047\uffd7" +
    "\050\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\001" +
    "\002\000\020\047\uffd9\050\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\001\002\000\010\012\uffe1\032\uffe1\033" +
    "\uffe1\001\002\000\020\047\057\050\061\055\065\056\056" +
    "\057\064\060\060\061\062\001\002\000\004\004\176\001" +
    "\002\000\004\010\177\001\002\000\006\002\uffed\015\uffed" +
    "\001\002\000\004\061\201\001\002\000\004\004\uffc0\001" +
    "\002\000\020\047\057\050\061\055\065\056\056\057\064" +
    "\060\060\061\062\001\002\000\004\012\204\001\002\000" +
    "\004\007\205\001\002\000\016\005\043\042\041\043\046" +
    "\052\037\053\051\061\050\001\002\000\004\010\207\001" +
    "\002\000\004\004\uffe7\001\002\000\016\016\004\017\013" +
    "\020\016\021\010\022\005\054\006\001\002\000\004\045" +
    "\212\001\002\000\020\047\057\050\061\055\065\056\056" +
    "\057\064\060\060\061\062\001\002\000\004\012\214\001" +
    "\002\000\004\004\uffd0\001\002\000\004\002\uffef\001\002" +
    "\000\004\006\uffff\001\002\000\004\061\223\001\002\000" +
    "\004\004\221\001\002\000\006\005\217\006\ufff1\001\002" +
    "\000\004\006\ufff2\001\002\000\004\007\224\001\002\000" +
    "\020\010\ufffd\016\004\017\013\020\016\021\010\022\005" +
    "\054\006\001\002\000\004\010\226\001\002\000\004\004" +
    "\ufff0\001\002\000\006\004\ufffb\045\233\001\002\000\004" +
    "\004\231\001\002\000\036\005\ufffd\006\ufffd\010\ufffd\016" +
    "\004\017\013\020\016\021\010\022\005\042\ufffd\043\ufffd" +
    "\052\ufffd\053\ufffd\054\006\061\ufffd\001\002\000\022\005" +
    "\ufffe\006\ufffe\010\ufffe\042\ufffe\043\ufffe\052\ufffe\053\ufffe" +
    "\061\ufffe\001\002\000\004\061\227\001\002\000\004\004" +
    "\ufffc\001\002\000\004\002\000\001\002\000\016\016\004" +
    "\017\013\020\016\021\010\022\005\054\006\001\002\000" +
    "\004\045\240\001\002\000\004\055\241\001\002\000\004" +
    "\012\242\001\002\000\006\045\ufff3\061\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\014\002\006\003\014\004\013\006\011\010" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\227\001\001\000\002\001\001\000\006" +
    "\011\215\012\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\020\014\017\001\001\000\006\013\214" +
    "\014\017\001\001\000\002\001\001\000\010\006\023\007" +
    "\022\010\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\027\010\010\015\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\027\010\010\015\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\035\006\011\010\010" +
    "\001\001\000\016\016\043\017\044\020\037\027\046\030" +
    "\051\033\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\054\034\053\036\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\072\036\074\001\001\000\006" +
    "\024\070\036\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\076\036\074\001\001\000\002\001\001\000" +
    "\006\035\100\036\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\054\034\104\036" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\133\036\074\001\001\000\006\024" +
    "\127\036\062\001\001\000\010\024\113\031\114\036\062" +
    "\001\001\000\010\024\113\031\125\036\062\001\001\000" +
    "\002\001\001\000\004\032\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\124\036\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\113\031\132\036\062\001\001\000\004\032\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\113\031\137\036\062\001\001\000\004\032" +
    "\117\001\001\000\016\016\141\017\044\020\037\027\046" +
    "\030\051\033\041\001\001\000\002\001\001\000\012\022" +
    "\145\023\144\024\143\036\062\001\001\000\004\025\164" +
    "\001\001\000\004\026\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\150\017\044\020\037\027\046" +
    "\030\051\033\041\001\001\000\002\001\001\000\004\021" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\155\017\044\020\037\027\046\030\051\033\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\162\023\144\024\143\036\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\172\036\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\174\036\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\202\023\144\024" +
    "\143\036\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\205\017\044\020\037\027\046\030\051\033" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\210\010\010\001\001\000\002\001\001\000\006\024" +
    "\212\036\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\221\012\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\224\006\011\010" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\231\006\011\010" +
    "\010\001\001\000\002\001\001\000\004\005\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\236\010" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		TablaSimbolos tabla = new TablaSimbolos();
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader,tabla);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico=analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		System.out.println("Error fatal.");
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis: linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);
  
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarations END_STRUCT functions 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= variables structs 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variables ::= type list END_INSTR variables 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variables ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list ::= ID COMMA list 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list ::= ID 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= REAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= CHAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= STRING 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= BOOL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= array 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // returntype ::= type 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returntype",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // array ::= ARRAY OPEN_PAR type COMMA NUM_INT CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // structs ::= struct END_INSTR structs 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structs ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // struct ::= STRUCT ID INIT_BLOCK variables END_BLOCK 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functions ::= function functions 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // functions ::= function 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function ::= FUNCTION returntype ID OPEN_PAR params CLOSE_PAR INIT_BLOCK variables instructions RETURN id END_INSTR END_BLOCK 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // params ::= type ID COMMA params 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // params ::= type ID 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // params ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instructions ::= expression END_INSTR instructions 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instructions ::= expression END_INSTR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // loop ::= WHILE OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= IF OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK else 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // else ::= ELSE INIT_BLOCK instructions END_BLOCK 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // else ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // conditions ::= condition 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // conditions ::= condition logic_operator conditions 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= id validate_operator id 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // id ::= ID 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // id ::= literal 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // id ::= ID POINT ID 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // id ::= ID OPEN_PAR arg_list CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // id ::= ID OPEN_BRACKETS id CLOSE_BRACKETS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // validate_operator ::= EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // validate_operator ::= NOT_EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // validate_operator ::= LESS_EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // validate_operator ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // validate_operator ::= LESS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // validate_operator ::= GREATER 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // logic_operator ::= AND 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logic_operator ::= OR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= assign 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= ID OPEN_PAR arg_list CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= create_struct 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= READ OPEN_PAR type COMMA id CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= PRINT OPEN_PAR print CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= loop 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= if 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assign ::= ID ASSIGN numeric_expr 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assign ::= ID OPEN_BRACKETS id CLOSE_BRACKETS ASSIGN numeric_expr 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assign ::= ID POINT ID ASSIGN numeric_expr 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // numeric_expr ::= numeric_expr operator id 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // numeric_expr ::= id 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // numeric_expr ::= OPEN_PAR numeric_expr CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operator ::= PLUS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operator ::= MINUS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operator ::= POW 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operator ::= MOD 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operator ::= DIV 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operator ::= MULT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // create_struct ::= STRUCT ID ID 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("create_struct",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print ::= id COMMA print 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print ::= id 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arg_list ::= ID COMMA arg_list 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arg_list ::= literal COMMA arg_list 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arg_list ::= ID 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arg_list ::= literal 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= NUM_INT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= NUM_REAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= TRUE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= FALSE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
