package procesadores;
import java_cup.runtime.*;
import java.io.*;

parser code {:
Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		TablaSimbolos tabla = new TablaSimbolos();
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader,tabla);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico=analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		System.out.println("Error fatal.");
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis: linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);
  
}

:};


/*Inicializacion del analizador lexico si procede*/
//init with {: s.init(); :};
/*Siguiente token al lexico*/
//scan with {: return this.getScanner().next_token(); :};

/*Terminales tokens que puede devolver el lexico*/
terminal END_INSTR, STRUCT, END_STRUCT, INIT_BLOCK, END_BLOCK, OPEN_PAR, CLOSE_PAR, OPEN_BRACKETS, CLOSE_BRACKETS, FUNCTION, INT, REAL, CHAR, STRING, BOOL, ASSIGN, LESS, GREATER, EQUAL, NOT_EQUAL, LESS_EQUAL, GREATER_EQUAL, AND, OR, PLUS, MINUS, DIV, MOD, MULT, POW, WHILE, IF, ELSE, COMMA, POINT, TRUE, FALSE, RETURN, READ, PRINT, ARRAY; 



/*Terminales con atributo*/
terminal Integer NUM_INT;
terminal Float NUM_REAL;
terminal Character CHAR_LITERAL;
terminal String STRING_LITERAL;
terminal Simbolo ID;

/* No terminales sin atributo*/
non terminal program, declarations, variables, list, type, returntype, array, structs, struct, functions, function, params, instructions, loop, if, else, conditions, condition, id, validate_operator, logic_operator, expression, assign, numeric_expr, operator, create_struct, print, arg_list, literal;

/* No terminales con atributo*/
/*non terminal  Integer expr, asignacion;*/

/*Precedencias*/
precedence left PLUS,MINUS;
precedence left MULT,DIV,MOD;
precedence right POW;

/*Gramatica*/

program ::= declarations END_STRUCT functions {:  :};

declarations ::= variables structs {:  :};

variables ::= type list END_INSTR variables {:  :} | {: :};

list ::= ID COMMA list {: :} | ID {:  :};

type ::= INT {: :} | REAL {: :} | CHAR {: :} | STRING {: :} | BOOL {: :} | array {: :};

returntype ::= type {: :};
 
array ::= ARRAY OPEN_PAR type COMMA NUM_INT CLOSE_PAR {: :};

structs ::= struct END_INSTR structs{: :}  | {: :};

struct ::= STRUCT ID INIT_BLOCK variables END_BLOCK {: :};

functions ::= function functions {: :} | function {: :};

function ::= FUNCTION returntype ID OPEN_PAR params CLOSE_PAR INIT_BLOCK variables instructions RETURN id END_INSTR END_BLOCK {: :};

params ::= type ID COMMA params {: :} | type ID {: :} | {: :};

instructions ::= expression END_INSTR instructions {: :} | expression END_INSTR {: :};

loop ::= WHILE OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK {: :};

if ::= IF OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK else {: :};

else ::= ELSE INIT_BLOCK instructions END_BLOCK {: :} | {: :};

conditions ::= condition {: :} | condition logic_operator conditions {: :};

condition ::= id validate_operator id {: :};

id ::= ID {: :} | literal {: :} | ID POINT ID {: :} | ID OPEN_PAR arg_list CLOSE_PAR {: :} |
	   ID OPEN_BRACKETS id CLOSE_BRACKETS {: :};

validate_operator ::= EQUAL {: :} | NOT_EQUAL {: :} | LESS_EQUAL {: :} | GREATER_EQUAL {: :} |
				 	  LESS {: :} |  GREATER {: :};

logic_operator ::= AND {: :} | OR {: :};

expression ::= assign {: :} | ID OPEN_PAR arg_list CLOSE_PAR  {: :} |
 			   create_struct  {: :} | 
 			   READ OPEN_PAR type COMMA id CLOSE_PAR {: :} |
 			   PRINT OPEN_PAR print CLOSE_PAR {: :} |
 			   loop {: :} | if {: :};
 
assign ::= ID ASSIGN numeric_expr {: :} | ID OPEN_BRACKETS id CLOSE_BRACKETS ASSIGN numeric_expr {: :} |
		   ID POINT ID ASSIGN numeric_expr {: :};

numeric_expr ::= numeric_expr operator id {: :} | id {: :} |
				 OPEN_PAR numeric_expr CLOSE_PAR  {: :};

operator ::=  PLUS  {: :} | MINUS{: :}| POW{: :}| MOD{: :}| DIV {: :}| MULT {: :};

create_struct ::=  STRUCT ID ID {: :};

print ::=  id COMMA print  {: :} | id {: :};

arg_list ::= ID COMMA arg_list  {: :} | literal COMMA arg_list {: :} | ID {: :} | literal {: :};

literal ::= NUM_INT {: :} | NUM_REAL {: :} | CHAR_LITERAL {: :} | STRING_LITERAL {: :} | TRUE{: :} | FALSE{: :};
