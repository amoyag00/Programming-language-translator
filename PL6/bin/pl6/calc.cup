package pl6;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
/**
 * 
 * @author Carlos Fernández Valladares / Samuel Lebrero Alonso / Alejandro Moya García
 *
 *  Practica: Practica  Gestion de tipos
 */
parser code {:

Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico= analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		System.out.println("Error fatal.");
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis con token: "+sym.terminalNames[current_token.sym]+" en linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);
  
}
:};



/*Terminales tokens que puede devolver el lexico*/
terminal INTEGER,REAL,CHAR,BOOLEAN;
terminal POINTER,TO,ARRAY,OF,PROCEDURE;
terminal CARACTER;
terminal ABREPAR,CIERRAPAR,ABRECOR,CIERRACOR,DOSPUNTOS,COMA,PTOYCOMA;
terminal String ID;
terminal Integer NUM;
terminal Float NUMREAL; 

non terminal Stack tipo, expr, declaracion;
non terminal String listaargumentos, argumentos;
non terminal programa;

/*Gramatica*/

programa ::= /* Epsilon*/
			| programa declaracion:d PTOYCOMA
			{: System.out.println(Simbolo.tipotoString(d));
			   System.out.println(); :}
			| programa error PTOYCOMA
			{: this.parser.error_sintactico(this.parser.cur_token);:}
;

declaracion ::= ID:id COMA declaracion:t
			{: RESULT=t;
			/* Se busca en tabla de simbolos y se inserta o devuelve error*/
			System.out.println("ID:"+id+" en no final");
			:}
			| ID:id DOSPUNTOS tipo:t
			{: RESULT=t;
			/* Se busca en tabla de simbolos y se inserta o devuelve error*/
			System.out.println("ID:"+id+" en final");
			:}
;			
tipo ::= INTEGER 
		{: RESULT= new Stack(); RESULT.push(new Character('i'));:}
		| REAL
		{: RESULT= new Stack(); RESULT.push(new Character('r'));:}
		| BOOLEAN
		{: RESULT= new Stack(); RESULT.push(new Character('b'));:}
		| CHAR
		{: RESULT= new Stack(); RESULT.push(new Character('c'));:}
		| PROCEDURE ABREPAR listaargumentos CIERRAPAR DOSPUNTOS tipo:t
		{: RESULT= t; RESULT.push(new Character('f'));:}
		| ARRAY ABRECOR NUM:d CIERRACOR OF tipo:t
		{: RESULT= t; RESULT.push(d);  RESULT.push(new Character('a'));:}
		| POINTER TO tipo:t
		{: RESULT= t; RESULT.push(new Character('p'));:}
;
listaargumentos::= {: RESULT=new String("Sin argumentos"); :}
				   | argumentos 							
;

/* Usamos este segundo No-Terminal para evitar listas de argumentos que acaben en coma 
ya que en listaargumentos al tener una produccion epsilon se permitiría*/
argumentos::= ID:id DOSPUNTOS tipo COMA argumentos
			  {:;:}
			  | ID:id DOSPUNTOS tipo
			  {:;:}
;
