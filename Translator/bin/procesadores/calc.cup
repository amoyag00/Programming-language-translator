package procesadores;
import java_cup.runtime.*;
import java.io.*;
import java.util.Stack;
import java.util.List;

parser code {:


Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		TablaSimbolos tabla = new TablaSimbolos();
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader,tabla);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico=analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		x.printStackTrace();
		System.out.println("Error fatal.");
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis: linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);    
}

public void error_semantico(String msg){
	System.out.println("Error semantico. "+msg+". Linea "+analizadorLexico.linea()+". Columna: "+analizadorLexico.columna());
	System.exit(-1);
}

:};


/*Inicializacion del analizador lexico si procede*/
//init with {: s.init(); :};
/*Siguiente token al lexico*/
//scan with {: return this.getScanner().next_token(); :};

/*Terminales tokens que puede devolver el lexico*/
terminal END_INSTR, STRUCT, END_STRUCT, INIT_BLOCK, END_BLOCK, OPEN_PAR, CLOSE_PAR, OPEN_BRACKETS, CLOSE_BRACKETS, FUNCTION, INT, REAL, CHAR, STRING, BOOL, ASSIGN, LESS, GREATER, EQUAL, NOT_EQUAL, LESS_EQUAL, GREATER_EQUAL, AND, OR, PLUS, MINUS, DIV, MOD, MULT, POW, WHILE, IF, ELSE, COMMA, POINT, TRUE, FALSE, RETURN, READ, PRINT/*, ARRAY*/; 



/*Terminales con atributo*/
terminal Integer NUM_INT;
terminal Double NUM_REAL;
terminal Character CHAR_LITERAL;
terminal String STRING_LITERAL;
terminal String ID;

/* No terminales sin atributo*/
non terminal program ;

/* No terminales con atributo*/
/*non terminal  Integer expr, asignacion;*/
non terminal Stack   list, structvars, params,arg_list;
non terminal Simbolo logic_operator, condition, validate_operator,print,loop, if, else, conditions,create_struct, operator,instructions, expression, assign,function,structs,struct, functions, literal, numeric_expr, id, returntype, index, type, array, variables, declarations ;

/*Precedencias*/
precedence left PLUS,MINUS;
precedence left MULT,DIV,MOD;
precedence right POW;

/*Gramatica*/

program ::= declarations:sim1 END_STRUCT functions:sim2 {:  

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	Simbolo main=tabla.buscarGlobal("$main");
	if( main==null ){
		error_semantico("No se ha declarado una funcion main");
	}else if(!main.getTipo().equals("FUNCTION")){
		error_semantico("No se ha declarado una funcion main");
	} 
		
	
	JavaGenerator jGen = new JavaGenerator();
	jGen.addCode(sim1.getCode()+"\n"+sim2.getCode());
	jGen.closeMain();
	jGen.generate();

:}| error {: 
	this.parser.error_sintactico(this.parser.cur_token);
:};

declarations ::= variables:sim1 structs:sim2 {:  

	RESULT = sim1;
	
	//Code
	sim1.setCode(sim1.getCode()+sim2.getCode());
:};

variables ::= type:sim list:l END_INSTR variables:sim2 {:
	RESULT=sim2;
	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	for (int i=0 ;i<l.size();i++){
		Simbolo simbolo = (Simbolo) l.get(i);
		
		String nombre =simbolo.getNombre();
		Simbolo aux= tabla.buscar(nombre);
		if(aux == null){
			//aux = new Simbolo(nombre, null);
			tabla.insertar(simbolo);
			simbolo.setTipo(sim.getTipo());
		}else{
			error_semantico("La variable "+ aux.nombre+" ya se ha declarado ");
		}
		
	}
	
	//Code
	
	String code = sim.getCode();
	for (int i=l.size()-1 ;i>0;i--){
		Simbolo simbolo = (Simbolo) l.get(i);
		
		if(simbolo.getDimension()!=0){//is array
			String codeArray=simbolo.getCode()+"= new "+sim.getCode();
	 	
		 	int dimension = simbolo.getDimension();
	 		for(int j=dimension-1;j>-1;j--){
	 			codeArray+="["+simbolo.getDim(j)+"]";
	 		}
	 		
	 		code+=codeArray+", ";	
		}else{
			
			String initialValue=tabla.getInitialValueOf(sim.getTipo());
			code +=simbolo.getCode()+ " = "+initialValue+", ";
		}
	}
	
	
	Simbolo lastSymbol =(Simbolo) l.get(0);
	
	if(lastSymbol.getDimension()!=0){//is array
		String codeArray=lastSymbol.getCode()+"= new "+sim.getCode();
	 	
	 	int dimension = lastSymbol.getDimension();
 		for(int i=dimension-1;i>-1;i--){
 			codeArray+="["+lastSymbol.getDim(i)+"]";
 		
 		}
 		
 		code+=codeArray+";";
 		
	}else{
		String initialValue=tabla.getInitialValueOf(sim.getTipo());
		code +=lastSymbol.getCode()+ " = "+initialValue+";";
		
	}
	
	sim2.setCode(code+"\n"+sim2.getCode());
	
 
:} | {:
	
	RESULT = new Simbolo();
	
	//Code
	RESULT.setCode("");
:};

list ::= ID:s COMMA list:l {: 

			 RESULT =l;
			 Simbolo sim = new Simbolo();
			 sim.setNombre(s);
			 RESULT.push(sim);
			 
			 //Code
			sim.setCode(s); 
			 
		:} | ID:s {:
		
			 RESULT = new Stack();
			 Simbolo sim = new Simbolo();
			 sim.setNombre(s);
			 RESULT.push(sim);
			 
			 //Code
			 sim.setCode(s);
			 
	 	:} | array:sim COMMA list:l{:
	 	
	 		RESULT = l;
			RESULT.push(sim);
			
			//Code
			//Made in array
			
	 	:} | array:sim {: 
	 	
	 		RESULT = new Stack();
	 		RESULT.push(sim);
	 		//Code
	 		
	 		
	 	:};

type ::= INT {:

		Simbolo sim = new Simbolo();
		sim.setTipo("INT");
		RESULT = sim; 
		
		//Code
		sim.setCode("int ");
		
	:} | REAL {:
	
		Simbolo sim = new Simbolo();
		sim.setTipo("REAL");
		RESULT = sim;
		
		//Code
		sim.setCode("double "); 
		
	:} | CHAR {: 
	
		Simbolo sim = new Simbolo();
		sim.setTipo("CHAR");
		RESULT = sim;
		
		//Code
		sim.setCode("char ");
		
	:} | STRING {:
	
		Simbolo sim = new Simbolo();
		sim.setTipo("STRING");
		RESULT = sim;
		
		//Code
		sim.setCode("String ");
		 
	:} | BOOL {:
	
		Simbolo sim = new Simbolo();
		sim.setTipo("BOOL");
		RESULT = sim;
		
		//Code
		sim.setCode("boolean ");
		
	:};

returntype ::= type:sim {: 

	RESULT = sim; 
	
:};
 
array ::= ID:s index:sim{: 
	sim.setNombre(s);
	RESULT=sim;
	
	//Code
	sim.setCode(s+" "+sim.getCode());
:};


structs ::= struct:sim1 END_INSTR structs:sim2{: 
	RESULT= sim2;
	
	//Code
	sim2.setCode(sim1.getCode()+sim2.getCode());

:}  | {: 
	RESULT = new Simbolo();
	
	//Code
	RESULT.setCode("");
:};

struct ::= STRUCT ID:s {: 

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	
	if(tabla.buscarStructDef(s)!=null){
		error_semantico("La struct "+ s+" ya se ha definido ");
		
	}
		
:}  INIT_BLOCK{: 

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	tabla.set();
	
:}structvars:t END_BLOCK{: 

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	StructDefinition def = new StructDefinition(s);
	def.addAttributes(t);
	tabla.addStructDef(def);
	
	tabla.reset();
	
	//Code
	RESULT = new Simbolo();
	String code = "public class "+s+"{\n";
	
	for(int i=t.size()-1;i>-1;i--){
		Simbolo current = (Simbolo)t.get(i);
		code+=current.getCode();
	}
	code+="}";
	RESULT.setCode(code);
:};

structvars ::= type:sim ID:nombre END_INSTR structvars:stack {:
	RESULT= stack;
	
	sim.setNombre(nombre);
	RESULT.push(sim);
	
	//Code
	sim.setCode(sim.getCode()+" "+nombre+";\n");

:} | type:sim ID:nombre END_INSTR {:

	RESULT=new Stack();
	sim.setNombre(nombre);
	RESULT.push(sim);
	
	//Code
	sim.setCode(sim.getCode()+" "+nombre+";\n");
	
:} | type:sim array:simbolo END_INSTR structvars:stack {:

	RESULT=stack;
	simbolo.setTipo(sim.getTipo());
	RESULT.push(simbolo);
	
	//Code
	String arrayCode ="";
	int dimension = simbolo.getDimension();
	for(int i=dimension-1;i>-1;i--){
		arrayCode+="["+simbolo.getDim(i)+"]";
	
	}
	simbolo.setCode(sim.getCode()+" "+simbolo.getCode()+" = new "+sim.getCode()+arrayCode+";\n");

:} | type:sim array:simbolo END_INSTR{:

	RESULT=new Stack();
	simbolo.setTipo(sim.getTipo());
	RESULT.push(simbolo);
	
	//Code
	String arrayCode ="";
	int dimension = simbolo.getDimension();
	for(int i=dimension-1;i>-1;i--){
		arrayCode+="["+simbolo.getDim(i)+"]";
	
	}
	simbolo.setCode(sim.getCode()+" "+simbolo.getCode()+" = new "+sim.getCode()+arrayCode+";\n");
	

:};


functions ::= function:sim1 functions:sim2 {: 
	
	RESULT = sim2;
	sim2.setCode(sim1.getCode()+sim2.getCode());
	
:} | function:sim1 {:

	RESULT = sim1;

 :};

function ::= FUNCTION returntype:sim1 ID:s OPEN_PAR params:l CLOSE_PAR{:
	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	Simbolo function = null;
 	if(tabla.buscarGlobal(s)==null){
 		function = new Simbolo(s, null);
		function.setTipo("FUNCTION");
		for (int i=l.size()-1 ;i>-1;i--){
			Simbolo sim = (Simbolo) l.get(i);
			function.addParamType( sim.getTipo());
		}
		tabla.insertar(function);
		function.setTipo("FUNCTION");
		function.setTipoRetorno(sim1.getTipo());
 		tabla.set();
 		
 		for (int i=l.size()-1 ;i>-1;i--){
			Simbolo sim = (Simbolo) l.get(i);
			tabla.insertar(sim);
		}
 		
 	}else{
 		error_semantico("Ya se ha declarado la funciÃ³n "+ s);
 	}
 	
 	//Code
 	String code="";
 	
 	if(s.equals("$main")){
 		if(function.getParamTypes().size()!=0){
			error_semantico("La funcion main no puede tener argumentos");
		}
		code+="public static void main(String [] args){\nMain main = new Main();\n"+
			"main.$main();\n}\n";
 		code+="public void $main(){\n";
 	}else{
 		code ="public "+sim1.getCode()+s+"(";
	 	if(!l.isEmpty()){
		 	for(int i=l.size()-1;i>0;i--){
		 		Simbolo aux = (Simbolo)l.get(i);
		 		code += aux.getCode()+",";
		 	}
		 	Simbolo aux = (Simbolo)l.get(0);
		 	code += aux.getCode();
		 	
		 	
	 	}
	 	
	 	code += "){\n";
 	}
 	
 	function.setCode(code);
 	RESULT=function;
 	
:} INIT_BLOCK variables:sim2 instructions:sim3 RETURN id:sim4 {:
			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			
			if(sim4.getDimension()!=sim1.getDimension()){
				error_semantico("La funciÃ³n "+s+" debe de retornar un valor "+
				"de dimension "+sim1.getDimension()+" y estÃ¡ retornando un valor de dimension "+sim4.getDimension());
			}else if(!tabla.isAssignable(sim1.getTipo(), sim4.getTipo())){
				error_semantico("La funciÃ³n "+s+" debe de retornar un valor "+
				"de tipo "+sim1.getTipo()+" y estÃ¡ retornando un valor de tipo "+sim4.getTipo());
			}
			tabla.reset();
			
			
			//Code
			String code ="";
			code+=sim2.getCode()+sim3.getCode();
			code+="return ";
			if(s.equals("$main")){
				code+=";\n}\n";
			}else{
				code+=sim4.getCode()+";\n}\n";
			}
			RESULT.setCode(RESULT.getCode()+code);
:} END_INSTR END_BLOCK;

params ::= type:sim ID:nombre COMMA params:l {:
				RESULT = l;
				RESULT.push(sim);
				sim.setNombre(nombre);
				
				//Code
				sim.setCode(sim.getCode()+ nombre); 
				
		   :} | type:sim ID:nombre {:
		   		RESULT = new Stack();
		   		RESULT.push(sim);
		   		sim.setNombre(nombre);
		   		
		   		//Code
				sim.setCode(sim.getCode()+ nombre); 
		   :} | {: 
		   		RESULT = new Stack();
		   :};

instructions ::= expression:sim1 END_INSTR instructions:sim2 {:
	Simbolo sim = new Simbolo(); 
	RESULT = sim;
	
	//Code
	sim.setCode(sim1.getCode()+";\n"+sim2.getCode());
	
	
:} | expression:sim1 END_INSTR {: 
	Simbolo sim = new Simbolo();
	RESULT = sim;
	
	//Code 
	sim.setCode(sim1.getCode()+";\n");
	
:};

loop ::= WHILE OPEN_PAR conditions:sim1 CLOSE_PAR INIT_BLOCK instructions:sim2 END_BLOCK {: 
	
	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("while("+sim1.getCode()+"){\n"+sim2.getCode()+"}\n");
	RESULT = sim;

:};

if ::= IF OPEN_PAR conditions:sim1 CLOSE_PAR INIT_BLOCK instructions:sim2 END_BLOCK else:sim3 {: 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("if("+sim1.getCode()+"){\n"+sim2.getCode()+"}"+sim3.getCode()+"\n");
	RESULT = sim;
	
:};

else ::= ELSE INIT_BLOCK instructions:sim1 END_BLOCK {: 
	
	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("else{\n"+sim1.getCode()+"}\n");
	RESULT = sim;
	
:} | {: 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("");

:};

conditions ::= condition:sim1 {: 

	//Code
	RESULT = sim1;
	
:} | condition:sim1 logic_operator conditions:sim2 {: 

	//Code
	RESULT=sim2;
	sim2.setCode(sim1.getCode()+sim2.getCode());
	
:};

condition ::= id:sim1 validate_operator:sim2 id:sim3 {: 
	Simbolo sim = new Simbolo();
	sim.setCode(sim1.getCode()+sim2.getCode()+sim3.getCode());
	RESULT=sim;

:};

id ::= ID:s {: 
			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo=tabla.buscarGlobal(s);
			
			if(simbolo==null){
				error_semantico("La variable "+s+" no se ha declarado");
			}else{
				RESULT= simbolo;
				
				simbolo.setCode(s);
			}
			
		:} | literal:sim {:
			
			RESULT = sim;
		
		:} | ID:s POINT ID:att {:
		
			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo=tabla.buscarGlobal(s);
			
			if(simbolo==null){
				error_semantico("La variable "+s+" no se ha declarado");
			}else{
				StructDefinition def =simbolo.getStructInstance().getStructDef();
				String attType= def.getTipoOf(att);
				if(attType==null){
					error_semantico("La variable de tipo struct "+s+
					" no tiene ningÃºn atributo "+att);
				}else{
					Simbolo sim = new Simbolo();
					sim.setTipo(attType);
					RESULT= sim;
				}
				
			}	
			
			//Code
			RESULT.setCode(s+"."+att);
			
			
		:} | ID:s OPEN_PAR arg_list:tipos CLOSE_PAR {:
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
				Simbolo function=tabla.buscarGlobal(s);
				
	 			if(function==null){
					error_semantico("La funciÃ³n "+s+" no existe");	
				}else if(!function.getTipo().equals("FUNCTION")){
					error_semantico(s+" no es una funciÃ³n");
				}else{
					List<String> expectedTipos = function.getParamTypes();
					if(expectedTipos.size()!=tipos.size()){
						error_semantico("La funciÃ³n "+s+" espera "+expectedTipos.size()+
						" parÃ¡metros");
					}
					for(int i=tipos.size()-1; i>-1;i--){
						Simbolo simb = (Simbolo)tipos.get(i);
						if(!expectedTipos.get(tipos.size()-1-i).equals(simb.getTipo())){
							error_semantico("El parametro "+(tipos.size()-1-i)+
							"de la funcion "+ s+" ha de ser de tipo "+
							expectedTipos.get(tipos.size()-i));
						}
					}
				}
				Simbolo sim = new Simbolo();
				sim.setTipo(function.getTipoRetorno());
				RESULT = sim;
				
				//Code
				//todo tipos
				String list="";
				for(int i=tipos.size()-1; i>0;i--){
					Simbolo aux = (Simbolo)tipos.get(i);
					list+=aux.getCode()+", ";
				}
				Simbolo lastSymbol =(Simbolo)tipos.get(0);
				list+=lastSymbol.getCode();
				
				sim.setCode(s+"("+list+")");
				
	   :} |ID:s index:sim {: 
	   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo = tabla.buscarGlobal(s);
			
 			if(simbolo==null){
				error_semantico("El array "+s+" no existe");	
			}else{
				sim.setTipo(simbolo.getTipo());
				sim.setDimension(simbolo.getDimension() - sim.getDimension());
				RESULT = sim;
			}
			
			//Code
			String codeArray="";
			int dimension = simbolo.getDimension();
	 		for(int j=dimension-1;j>-1;j--){
	 			codeArray+="["+sim.getDim(j)+"]";
	 		}
			sim.setCode(s+codeArray);
	   :};
	   
index ::= OPEN_BRACKETS NUM_INT:num CLOSE_BRACKETS index:sim {: 

	sim.increaseDim();
	RESULT = sim;
	
	//Code
	sim.setCode(sim.getCode()+" []");
	sim.addDim(num);

:}| OPEN_BRACKETS NUM_INT:num CLOSE_BRACKETS	{: 
	
	Simbolo simbolo = new Simbolo();
	simbolo.setDimension(1);
	RESULT = simbolo;
	
	//Code
	simbolo.setCode("[]");
	simbolo.addDim(num);
	
:};   

validate_operator ::= EQUAL {: 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("==");
	RESULT = sim;
	
:} | NOT_EQUAL {: 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("!=");
	RESULT = sim;
	
:} | LESS_EQUAL {: 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("<=");
	RESULT = sim;
	
:} | GREATER_EQUAL {: 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode(">=");
	RESULT = sim;
	
:} | LESS {: 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("<");
	RESULT = sim;
	
:} |  GREATER {: 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode(">");
	RESULT = sim;
	
:};

logic_operator ::= AND {: 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("&&");
	RESULT = sim;
	
:} | OR {: 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("||");
	RESULT = sim;
	
:};

expression ::= assign:sim {: 

	RESULT = sim;
:} | ID:s OPEN_PAR arg_list:tipos CLOSE_PAR  {:
				
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
				Simbolo function=tabla.buscarGlobal(s);
				
	 			if(function==null){
					error_semantico("La funciÃ³n "+s+" no existe");	
				}else if(!function.getTipo().equals("FUNCTION")){
					error_semantico(s+" no es una funciÃ³n");
				}else{
					List<String> expectedTipos = function.getParamTypes();
					if(expectedTipos.size()!=tipos.size()){
						error_semantico("La funciÃ³n "+s+" espera "+expectedTipos.size()+
						" parÃ¡metros");
					}
					for(int i=tipos.size()-1; i>-1;i--){
						Simbolo simb = (Simbolo)tipos.get(i);
						if(!expectedTipos.get(tipos.size()-1-i).equals(simb.getTipo())){
							error_semantico("El parametro "+(tipos.size()-1-i)+
							"de la funcion "+ s+" ha de ser de tipo "+
							expectedTipos.get(tipos.size()-i));
						}
					}
				}
				Simbolo sim = new Simbolo();
				sim.setTipo(function.getTipoRetorno());
				RESULT = sim;
				
				//Code
				//todo tipos
				String list="";
				for(int i=tipos.size()-1; i>0;i--){
					Simbolo aux = (Simbolo)tipos.get(i);
					list+=aux.getCode()+", ";
				}
				Simbolo lastSymbol =(Simbolo)tipos.get(0);
				list+=lastSymbol.getCode();
				
				sim.setCode(s+"("+list+")");
:} | create_struct:sim  {: 

	//Code 
	RESULT = sim;

:} | READ OPEN_PAR type COMMA id CLOSE_PAR {: 
	//Code
	//TODO
	RESULT= new Simbolo();
	RESULT.setCode("");
:} | PRINT OPEN_PAR print:sim1 CLOSE_PAR {:
 	
 	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("System.out.println("+sim1.getCode()+")");
	RESULT = sim;
	
:} | loop:sim {: 
	
	//Code
	RESULT = sim;
	
:} | if:sim {: 
	
	//Code
	RESULT = sim;
	
:};
 
assign ::= ID:s ASSIGN numeric_expr:sim {: 
				
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo simbolo=tabla.buscarGlobal(s);
				
				if(simbolo==null){
					error_semantico("La variable "+s+" no existe");
				}else{
					String expectedTipo = simbolo.getTipo();
					if(!tabla.isAssignable(expectedTipo,sim.getTipo())){
						error_semantico("No se puede asignar una variable de tipo "+
						sim.getTipo()+" a una variable de tipo "+expectedTipo);
					}else if(simbolo.getDimension()!=sim.getDimension()){
						error_semantico("No se puede asignar una variable de dimensiÃ³n "+
						sim.getDimension()+" a una variable de dimensiÃ³n "+simbolo.getDimension());
					}
				}
				
				//Code
				Simbolo simb = new Simbolo();
				simb.setCode(s+" = "+sim.getCode());
				RESULT=simb;
				
		   :} | ID:s index:sim1 ASSIGN numeric_expr:sim2 {: 
		   		
		   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo simbolo=tabla.buscarGlobal(s);
				
				if(simbolo==null){
					error_semantico("La variable "+s+" no existe");
				}else{
					String expectedTipo = simbolo.getTipo();
					if(!tabla.isAssignable(expectedTipo,sim2.getTipo())){
						error_semantico("No se ha puede asignar una variable de tipo "+
						sim2.getTipo()+" a una variable de tipo "+expectedTipo);
						
					}else{
						int currentDim=simbolo.getDimension()-sim1.getDimension();
						if(currentDim!=sim2.getDimension()){
							error_semantico("No se ha puede asignar una variable de dimension "+
							sim2.getDimension()+" a una variable de dimension "+sim1.getDimension());
						}
					}
				}
				
				//Code
				Simbolo simb = new Simbolo();
				String codeArray="";
				
				int dimension = sim1.getDimension();
		 		for(int j=dimension-1;j>-1;j--){
		 			codeArray+="["+sim1.getDim(j)+"]";
		 		}
				
				simb.setCode(s+codeArray+" = "+sim2.getCode());
				RESULT=simb;
				
		   :} | ID:sStruct POINT ID:attName ASSIGN numeric_expr:sim {: 
		   
		   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		   		Simbolo struct = tabla.buscarGlobal(sStruct);
		   		if(struct==null){
		   			error_semantico("No ha creado ninguna struct de nombre "+sStruct);
		   		}else{
		   			StructDefinition def = struct.getStructInstance().getStructDef();
		   			String attTipo = def.getTipoOf(attName);
		   			if(attTipo==null){
		   				error_semantico("La struct "+sStruct+" no tiene ningÃºn atributo de nombre "+
		   				attName);
		   			}else if(struct.getDimension()!=sim.getDimension()){
						error_semantico("No se puede asignar una variable de dimensiÃ³n "+
						sim.getDimension()+" a un atributo de una struct de dimensiÃ³n "+struct.getDimension());
					}else if(tabla.isAssignable(attTipo, sim.getTipo())){
						Simbolo tipo = new Simbolo();
						tipo.setTipo(attTipo);
						RESULT = tipo;
		   			}else{
		   				error_semantico("No se puede asignar una variable de tipo "+
		   				sim.getTipo()+" a un atributo de una struct de tipo "+attTipo);
		   			}
		   			
		   		}
		   		
		   		//Code
				Simbolo simbolo = new Simbolo();
				simbolo.setCode(sStruct+"."+attName+" = "+sim.getCode());
				RESULT=simbolo;
		   		
		   :};

numeric_expr ::= numeric_expr:sim1 operator:simOP numeric_expr:sim2 {:
					
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					
					if( !tabla.isNumeric(sim1.getTipo()) || !tabla.isNumeric(sim2.getTipo()) ){
						error_semantico("Las operaciones matemÃ¡ticas han de ser"+
						" entre tipos REAL o INT. No se puede operar el tipo "+sim1.getTipo()+
						" con el tipo "+sim2.getTipo());	
					}else{
					
						if(sim1.getTipo().equals("REAL") || sim2.getTipo().equals("REAL") ){
							Simbolo sim = new Simbolo();
							sim.setTipo("REAL");
							RESULT= sim;
						}else{
							Simbolo sim = new Simbolo();
							sim.setTipo("INT");
							RESULT= sim;
						}
					}
					
					//Code
					//TODO pow
					RESULT.setCode(sim1.getCode()+simOP.getCode()+sim2.getCode());
					
				 :} | id:sim {: 
				 
				 	RESULT=sim;
				 	
				 	//Code
				 	
				 	
				 :} | MINUS id:sim {:
				 
				 	RESULT= sim;
				 	
				 	//Code
				 	sim.setCode("-"+sim.getCode());
				 	
				 :} | OPEN_PAR numeric_expr:sim CLOSE_PAR  {: 
				 
				 	RESULT= sim;
				 	
				 	
				 	//Code
				 	sim.setCode("("+sim.getCode()+")");
				 :};

operator ::=  PLUS  {: 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("+");

:} | MINUS{: 
	
	//Code
	RESULT = new Simbolo();
	RESULT.setCode("-");

:}| POW{: 
	
	//Code
	RESULT = new Simbolo();
	RESULT.setCode("^");

:}| MOD{: 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("%");
	
:}| DIV {: 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("/");

:}| MULT {: 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("*");

:};

create_struct ::=  STRUCT ID:structDef ID:s {: 
				
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					StructDefinition def = tabla.buscarStructDef(structDef);
					
					if(def==null){
						error_semantico("No se ha definido un struct de nombre "+structDef);
					}else{
						Simbolo simbolo = new Simbolo(s, null);
						simbolo.createStructInstance(def);
						simbolo.setTipo("STRUCT");
						tabla.insertar(simbolo);
					}
					
					//Code
					Simbolo simbolo = new Simbolo();
					simbolo.setCode(structDef+" "+s+" = new "+structDef+"()");
					
					RESULT = simbolo;
:};

print ::=  id:sim1 COMMA print:sim2  {:
	//Code 
	Simbolo sim = new Simbolo();
	sim.setCode(sim1.getCode()+"+"+sim2.getCode());
	RESULT=sim;
:} | id :sim1{: 
	//Code
	RESULT=sim1;
:};

arg_list ::= ID:s COMMA arg_list:stack  {:
	
		RESULT= stack; 
		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		Simbolo simbolo=tabla.buscarGlobal(s);
				
	 	if(simbolo==null){
			error_semantico("La variable "+s+" no se ha declarado");	
		}else{
			RESULT.push(simbolo);		
		}
		
		//Code
		simbolo.setCode(s);
	
	:} | literal:l COMMA arg_list:stack {:

		RESULT= stack; 
		RESULT.push(l);
		
		//Code
				
		
		
	:} | ID:s {: 
	
		RESULT = new Stack();
		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		Simbolo simbolo=tabla.buscarGlobal(s);
				
	 	if(simbolo==null){
			error_semantico("La variable "+s+" no se ha declarado");	
		}else{
			RESULT.push(simbolo);		
		}
	 
	 	//Code
	 	simbolo.setCode(s);
	:} | literal:l {:
	 
		RESULT = new Stack();
		RESULT.push(l);
		
		//Code
	:}| {: 
		RESULT = new Stack();
	:};

literal ::= NUM_INT:num {: 

	Simbolo sim = new Simbolo();
	sim.setTipo("INT");
	RESULT=sim;
	
	//Code
	sim.setCode(""+num); 
	
:} | NUM_REAL:num {: 

	Simbolo sim = new Simbolo();
	sim.setTipo("REAL");
	RESULT=sim;
	
	//Code
	sim.setCode(""+num); 
	
:} | CHAR_LITERAL:chr {: 

	Simbolo sim = new Simbolo();
	sim.setTipo("CHAR");
	RESULT=sim; 
	
	//Code
	sim.setCode("'"+chr+"'");
	
:} | STRING_LITERAL:str {:
 
	Simbolo sim = new Simbolo();
	sim.setTipo("STRING");
	RESULT=sim;
	
	//Code
	sim.setCode(str);
	
:} | TRUE{: 

	Simbolo sim = new Simbolo();
	sim.setTipo("BOOL");
	RESULT=sim;
	
	//Code
	sim.setCode("true");
	 
:} | FALSE{: 

	Simbolo sim = new Simbolo();
	sim.setTipo("BOOL");
	RESULT=sim;
	
	//Code
	sim.setCode("false"); 
	
:};