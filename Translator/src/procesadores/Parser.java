
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package procesadores;

import java_cup.runtime.*;
import java.io.*;
import java.util.Stack;
import java.util.List;
import java.util.Scanner;
import java.util.Locale;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\041\004\000\002\040\006\000\002\040\002" +
    "\000\002\003\005\000\002\003\003\000\002\003\005\000" +
    "\002\003\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\034" +
    "\003\000\002\037\004\000\002\026\005\000\002\026\002" +
    "\000\002\042\002\000\002\043\002\000\002\027\011\000" +
    "\002\004\006\000\002\004\005\000\002\004\006\000\002" +
    "\004\005\000\002\030\004\000\002\030\003\000\002\044" +
    "\002\000\002\045\002\000\002\025\021\000\002\005\006" +
    "\000\002\005\004\000\002\005\002\000\002\022\005\000" +
    "\002\022\004\000\002\014\011\000\002\015\012\000\002" +
    "\016\006\000\002\016\002\000\002\017\003\000\002\017" +
    "\005\000\002\017\005\000\002\011\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\005\000\002\033\006\000" +
    "\002\033\004\000\002\035\006\000\002\035\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\010\003" +
    "\000\002\010\003\000\002\023\003\000\002\023\006\000" +
    "\002\023\003\000\002\023\003\000\002\023\006\000\002" +
    "\023\003\000\002\023\003\000\002\007\006\000\002\024" +
    "\005\000\002\024\006\000\002\024\007\000\002\032\005" +
    "\000\002\032\003\000\002\032\004\000\002\032\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\020" +
    "\005\000\002\013\005\000\002\013\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\002\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\022\003\012\005\ufffc\006\ufffc\016\004\017" +
    "\011\020\015\021\007\022\005\001\002\000\004\060\ufff7" +
    "\001\002\000\004\060\ufff3\001\002\000\004\002\257\001" +
    "\002\000\004\060\ufff4\001\002\000\004\060\246\001\002" +
    "\000\004\060\ufff6\001\002\000\004\002\uffff\001\002\000" +
    "\006\005\224\006\uffef\001\002\000\004\006\016\001\002" +
    "\000\004\060\ufff5\001\002\000\004\015\021\001\002\000" +
    "\006\002\uffe6\015\021\001\002\000\004\002\001\001\002" +
    "\000\014\016\004\017\011\020\015\021\007\022\005\001" +
    "\002\000\004\060\ufff2\001\002\000\004\060\024\001\002" +
    "\000\004\011\025\001\002\000\016\012\uffe0\016\004\017" +
    "\011\020\015\021\007\022\005\001\002\000\004\060\217" +
    "\001\002\000\004\012\030\001\002\000\004\007\uffe5\001" +
    "\002\000\004\007\032\001\002\000\030\005\ufffc\016\004" +
    "\017\011\020\015\021\007\022\005\042\ufffc\043\ufffc\052" +
    "\ufffc\053\ufffc\060\ufffc\001\002\000\016\005\041\042\036" +
    "\043\044\052\035\053\047\060\046\001\002\000\004\004" +
    "\uffc0\001\002\000\004\011\214\001\002\000\004\011\206" +
    "\001\002\000\004\004\uffc3\001\002\000\004\004\uffc4\001" +
    "\002\000\004\060\204\001\002\000\004\051\177\001\002" +
    "\000\004\004\uffc1\001\002\000\004\011\143\001\002\000" +
    "\004\004\141\001\002\000\012\011\111\013\067\023\112" +
    "\046\107\001\002\000\004\011\051\001\002\000\004\004" +
    "\uffc6\001\002\000\020\047\055\050\057\054\063\055\054" +
    "\056\062\057\056\060\060\001\002\000\004\012\106\001" +
    "\002\000\006\012\uffaf\045\104\001\002\000\044\004\uffa8" +
    "\012\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\045\uffa8\001\002\000\044\004\uffa5\012" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\045\uffa5\001\002\000\044\004\uffa6\012\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\045\uffa6\001\002\000\044\004\uffa4\012\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\045\uffa4\001\002\000\052\004\uffd5\011\066\012\uffd5" +
    "\013\067\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\045\uffd5\046\064\001\002\000\044\004" +
    "\uffd4\012\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\045\uffd4\001\002\000\044\004\uffa7" +
    "\012\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\045\uffa7\001\002\000\044\004\uffa9\012" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\045\uffa9\001\002\000\004\060\103\001\002" +
    "\000\044\004\uffd1\012\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\045\uffd1\001\002\000" +
    "\022\012\uffaa\047\055\050\057\054\063\055\054\056\062" +
    "\057\056\060\074\001\002\000\004\054\070\001\002\000" +
    "\004\014\071\001\002\000\050\004\uffcf\012\uffcf\013\067" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\045\uffcf\001\002\000\046\004\uffd0\012" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\045\uffd0\001\002\000\004\012\102" +
    "\001\002\000\006\012\uffac\045\100\001\002\000\006\012" +
    "\uffab\045\076\001\002\000\022\012\uffaa\047\055\050\057" +
    "\054\063\055\054\056\062\057\056\060\074\001\002\000" +
    "\004\012\uffad\001\002\000\022\012\uffaa\047\055\050\057" +
    "\054\063\055\054\056\062\057\056\060\074\001\002\000" +
    "\004\012\uffae\001\002\000\044\004\uffd2\012\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\045\uffd2\001\002\000\044\004\uffd3\012\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\045" +
    "\uffd3\001\002\000\020\047\055\050\057\054\063\055\054" +
    "\056\062\057\056\060\060\001\002\000\004\012\uffb0\001" +
    "\002\000\004\004\uffc2\001\002\000\004\060\136\001\002" +
    "\000\004\023\134\001\002\000\022\012\uffaa\047\055\050" +
    "\057\054\063\055\054\056\062\057\056\060\074\001\002" +
    "\000\024\011\114\035\113\047\055\050\057\054\063\055" +
    "\054\056\062\057\056\060\060\001\002\000\020\047\055" +
    "\050\057\054\063\055\054\056\062\057\056\060\060\001" +
    "\002\000\024\011\114\035\113\047\055\050\057\054\063" +
    "\055\054\056\062\057\056\060\060\001\002\000\022\004" +
    "\uffba\012\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\001\002\000\020\004\uffbe\034\123\035\124\036" +
    "\125\037\117\040\121\041\122\001\002\000\024\011\uffb4" +
    "\035\uffb4\047\uffb4\050\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\001\002\000\024\011\114\035\113\047\055" +
    "\050\057\054\063\055\054\056\062\057\056\060\060\001" +
    "\002\000\024\011\uffb2\035\uffb2\047\uffb2\050\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\001\002\000\024\011" +
    "\uffb5\035\uffb5\047\uffb5\050\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\001\002\000\024\011\uffb7\035\uffb7\047" +
    "\uffb7\050\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\001\002\000\024\011\uffb6\035\uffb6\047\uffb6\050\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000\024" +
    "\011\uffb3\035\uffb3\047\uffb3\050\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\001\002\000\022\004\uffbb\012\uffbb" +
    "\034\123\035\124\036\125\037\117\040\121\041\122\001" +
    "\002\000\020\012\130\034\123\035\124\036\125\037\117" +
    "\040\121\041\122\001\002\000\022\004\uffb8\012\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\001\002" +
    "\000\022\004\uffb9\012\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\001\002\000\004\012\133\001\002" +
    "\000\004\004\uffc5\001\002\000\024\011\114\035\113\047" +
    "\055\050\057\054\063\055\054\056\062\057\056\060\060" +
    "\001\002\000\020\004\uffbd\034\123\035\124\036\125\037" +
    "\117\040\121\041\122\001\002\000\004\023\137\001\002" +
    "\000\024\011\114\035\113\047\055\050\057\054\063\055" +
    "\054\056\062\057\056\060\060\001\002\000\020\004\uffbc" +
    "\034\123\035\124\036\125\037\117\040\121\041\122\001" +
    "\002\000\022\005\041\010\uffde\042\036\043\044\051\uffde" +
    "\052\035\053\047\060\046\001\002\000\006\010\uffdf\051" +
    "\uffdf\001\002\000\022\011\144\047\055\050\057\054\063" +
    "\055\054\056\062\057\056\060\060\001\002\000\020\047" +
    "\055\050\057\054\063\055\054\056\062\057\056\060\060" +
    "\001\002\000\016\024\172\025\167\026\171\027\166\030" +
    "\173\031\170\001\002\000\010\012\uffd9\032\162\033\163" +
    "\001\002\000\004\012\150\001\002\000\004\007\151\001" +
    "\002\000\016\005\041\042\036\043\044\052\035\053\047" +
    "\060\046\001\002\000\004\010\153\001\002\000\006\004" +
    "\uffda\044\154\001\002\000\004\007\156\001\002\000\004" +
    "\004\uffdc\001\002\000\016\005\041\042\036\043\044\052" +
    "\035\053\047\060\046\001\002\000\004\010\160\001\002" +
    "\000\004\004\uffdb\001\002\000\022\011\144\047\055\050" +
    "\057\054\063\055\054\056\062\057\056\060\060\001\002" +
    "\000\022\011\uffc8\047\uffc8\050\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\001\002\000\022\011\uffc7\047\uffc7" +
    "\050\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\001" +
    "\002\000\004\012\uffd8\001\002\000\020\047\055\050\057" +
    "\054\063\055\054\056\062\057\056\060\060\001\002\000" +
    "\020\047\uffcd\050\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\001\002\000\020\047\uffc9\050\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\001\002\000\020\047\uffcb" +
    "\050\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\001" +
    "\002\000\020\047\uffce\050\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\001\002\000\020\047\uffca\050\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\060\uffca\001\002\000\020" +
    "\047\uffcc\050\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\001\002\000\010\012\uffd6\032\uffd6\033\uffd6\001\002" +
    "\000\004\012\176\001\002\000\004\012\uffd7\001\002\000" +
    "\020\047\055\050\057\054\063\055\054\056\062\057\056" +
    "\060\060\001\002\000\004\004\uffe4\001\002\000\004\004" +
    "\202\001\002\000\004\010\203\001\002\000\006\002\uffe3" +
    "\015\uffe3\001\002\000\004\060\205\001\002\000\004\004" +
    "\uffb1\001\002\000\022\011\144\047\055\050\057\054\063" +
    "\055\054\056\062\057\056\060\060\001\002\000\004\012" +
    "\210\001\002\000\004\007\211\001\002\000\016\005\041" +
    "\042\036\043\044\052\035\053\047\060\046\001\002\000" +
    "\004\010\213\001\002\000\004\004\uffdd\001\002\000\004" +
    "\060\215\001\002\000\004\012\216\001\002\000\004\004" +
    "\uffbf\001\002\000\006\012\uffe1\045\220\001\002\000\016" +
    "\012\uffe0\016\004\017\011\020\015\021\007\022\005\001" +
    "\002\000\004\012\uffe2\001\002\000\004\002\uffe7\001\002" +
    "\000\004\006\ufffe\001\002\000\004\060\230\001\002\000" +
    "\004\004\226\001\002\000\006\005\224\006\uffef\001\002" +
    "\000\004\006\ufff0\001\002\000\004\007\uffee\001\002\000" +
    "\004\007\232\001\002\000\014\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\001\002\000\014\016\004\017\011\020" +
    "\015\021\007\022\005\001\002\000\004\060\237\001\002" +
    "\000\004\010\236\001\002\000\004\004\uffec\001\002\000" +
    "\006\004\243\013\067\001\002\000\004\004\241\001\002" +
    "\000\016\010\uffe8\016\004\017\011\020\015\021\007\022" +
    "\005\001\002\000\004\010\uffe9\001\002\000\016\010\uffea" +
    "\016\004\017\011\020\015\021\007\022\005\001\002\000" +
    "\006\004\ufff1\045\ufff1\001\002\000\004\010\uffeb\001\002" +
    "\000\010\004\ufffa\013\067\045\255\001\002\000\004\004" +
    "\253\001\002\000\006\004\ufff8\045\251\001\002\000\004" +
    "\060\246\001\002\000\004\004\ufff9\001\002\000\032\005" +
    "\ufffc\006\ufffc\016\004\017\011\020\015\021\007\022\005" +
    "\042\ufffc\043\ufffc\052\ufffc\053\ufffc\060\ufffc\001\002\000" +
    "\020\005\ufffd\006\ufffd\042\ufffd\043\ufffd\052\ufffd\053\ufffd" +
    "\060\ufffd\001\002\000\004\060\246\001\002\000\004\004" +
    "\ufffb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\012\002\005\036\007\040\012\041\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\246\037\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\222\027\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\016\030\017\001\001\000\006\025\016\030\221\001\001" +
    "\000\002\001\001\000\006\034\022\036\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\026\036\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\030\001\001\000\002\001\001\000\006" +
    "\036\007\040\032\001\001\000\020\007\036\014\042\015" +
    "\033\020\037\022\041\023\044\024\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\051\031\060\033\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\072\031" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\076\031\074" +
    "\001\001\000\002\001\001\000\006\006\100\031\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\104\031\060\033\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\131\031\074\001\001\000\010\031\060\032" +
    "\115\033\114\001\001\000\006\031\060\033\130\001\001" +
    "\000\010\031\060\032\126\033\114\001\001\000\002\001" +
    "\001\000\004\021\117\001\001\000\002\001\001\000\010" +
    "\031\060\032\125\033\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\117\001\001\000\004\021\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\060\032\134\033\114\001" +
    "\001\000\004\021\117\001\001\000\002\001\001\000\010" +
    "\031\060\032\137\033\114\001\001\000\004\021\117\001" +
    "\001\000\020\007\036\014\042\015\033\020\037\022\141" +
    "\023\044\024\047\001\001\000\002\001\001\000\012\011" +
    "\145\017\146\031\060\033\144\001\001\000\010\011\174" +
    "\031\060\033\144\001\001\000\004\012\164\001\001\000" +
    "\004\010\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\036\014\042\015\033\020\037\022\151\023" +
    "\044\024\047\001\001\000\002\001\001\000\004\016\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\036\014\042\015\033\020\037\022\156\023\044\024\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\145\017\163\031\060\033\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\060\033" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\060\033\177\001\001\000\004\045\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\145\017" +
    "\206\031\060\033\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\036\014\042\015\033\020\037\022" +
    "\211\023\044\024\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\220\036\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\226\027\224" +
    "\001\001\000\002\001\001\000\004\042\230\001\001\000" +
    "\002\001\001\000\004\043\232\001\001\000\006\004\234" +
    "\036\233\001\001\000\004\037\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\243\001\001\000\002" +
    "\001\001\000\006\004\241\036\233\001\001\000\002\001" +
    "\001\000\006\004\244\036\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\251\037\247\001\001" +
    "\000\002\001\001\000\006\036\007\040\253\001\001\000" +
    "\002\001\001\000\006\003\255\037\247\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		TablaSimbolos tabla = new TablaSimbolos();
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader,tabla);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico=analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		x.printStackTrace();
		System.out.println("Error fatal.");
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis: linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);    
}

public void error_semantico(String msg){
	System.out.println("Error semantico. "+msg+". Linea "+analizadorLexico.linea()+". Columna: "+analizadorLexico.columna());
	System.exit(-1);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarations END_STRUCT functions 
            {
              Object RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	Simbolo main=tabla.buscarGlobal("$main");
	if( main==null ){
		error_semantico("No se ha declarado una funcion main");
	}else if(!main.getTipo().equals("FUNCTION")){
		error_semantico("No se ha declarado una funcion main");
	} 
		
	
	JavaGenerator jGen = new JavaGenerator();
	jGen.addCode(sim1.getCode()+"\n"+sim2.getCode());
	jGen.closeMain();
	jGen.generate();


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Object RESULT =null;
		 
	this.parser.error_sintactico(this.parser.cur_token);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= variables structs 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  

	RESULT = sim1;
	
	//Code
	sim1.setCode(sim1.getCode()+sim2.getCode());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variables ::= type list END_INSTR variables 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT=sim2;
	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	for (int i=0 ;i<l.size();i++){
		Simbolo simbolo = (Simbolo) l.get(i);
		
		String nombre =simbolo.getNombre();
		Simbolo aux= tabla.buscar(nombre);
		if(aux == null){
			//aux = new Simbolo(nombre, null);
			tabla.insertar(simbolo);
			simbolo.setTipo(sim.getTipo());
		}else{
			error_semantico("La variable "+ aux.nombre+" ya se ha declarado ");
		}
		
	}
	
	//Code
	
	String code = sim.getCode();
	for (int i=l.size()-1 ;i>0;i--){
		Simbolo simbolo = (Simbolo) l.get(i);
		
		if(simbolo.getDimension()!=0){//is array
			String codeArray=simbolo.getCode()+"= new "+sim.getCode();
	 	
		 	int dimension = simbolo.getDimension();
	 		for(int j=dimension-1;j>-1;j--){
	 			codeArray+="["+simbolo.getDim(j)+"]";
	 		}
	 		
	 		code+=codeArray+", ";	
		}else{
			
			String initialValue=tabla.getInitialValueOf(sim.getTipo());
			code +=simbolo.getCode()+ " = "+initialValue+", ";
		}
	}
	
	
	Simbolo lastSymbol =(Simbolo) l.get(0);
	
	if(lastSymbol.getDimension()!=0){//is array
		String codeArray=lastSymbol.getCode()+"= new "+sim.getCode();
	 	
	 	int dimension = lastSymbol.getDimension();
 		for(int i=dimension-1;i>-1;i--){
 			codeArray+="["+lastSymbol.getDim(i)+"]";
 		
 		}
 		
 		code+=codeArray+";";
 		
	}else{
		String initialValue=tabla.getInitialValueOf(sim.getTipo());
		code +=lastSymbol.getCode()+ " = "+initialValue+";";
		
	}
	
	sim2.setCode(code+"\n"+sim2.getCode());
	
 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variables ::= 
            {
              Simbolo RESULT =null;
		
	
	RESULT = new Simbolo();
	
	//Code
	RESULT.setCode("");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list ::= ID COMMA list 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

			 RESULT =l;
			 Simbolo sim = new Simbolo();
			 sim.setNombre(s);
			 RESULT.push(sim);
			 
			 //Code
			sim.setCode(s); 
			 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list ::= ID 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
			 RESULT = new Stack();
			 Simbolo sim = new Simbolo();
			 sim.setNombre(s);
			 RESULT.push(sim);
			 
			 //Code
			 sim.setCode(s);
			 
	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list ::= array COMMA list 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 	
	 		RESULT = l;
			RESULT.push(sim);
			
			//Code
			//Made in array
			
	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list ::= array 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	 	
	 		RESULT = new Stack();
	 		RESULT.push(sim);
	 		//Code
	 		
	 		
	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INT 
            {
              Simbolo RESULT =null;
		

		Simbolo sim = new Simbolo();
		sim.setTipo("INT");
		RESULT = sim; 
		
		//Code
		sim.setCode("int ");
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= REAL 
            {
              Simbolo RESULT =null;
		
	
		Simbolo sim = new Simbolo();
		sim.setTipo("REAL");
		RESULT = sim;
		
		//Code
		sim.setCode("double "); 
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= CHAR 
            {
              Simbolo RESULT =null;
		 
	
		Simbolo sim = new Simbolo();
		sim.setTipo("CHAR");
		RESULT = sim;
		
		//Code
		sim.setCode("char ");
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= STRING 
            {
              Simbolo RESULT =null;
		
	
		Simbolo sim = new Simbolo();
		sim.setTipo("STRING");
		RESULT = sim;
		
		//Code
		sim.setCode("String ");
		 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= BOOL 
            {
              Simbolo RESULT =null;
		
	
		Simbolo sim = new Simbolo();
		sim.setTipo("BOOL");
		RESULT = sim;
		
		//Code
		sim.setCode("boolean ");
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // returntype ::= type 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	RESULT = sim; 
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returntype",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // array ::= ID index 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	sim.setNombre(s);
	RESULT=sim;
	
	//Code
	sim.setCode(s+" "+sim.getCode());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // structs ::= struct END_INSTR structs 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	RESULT= sim2;
	
	//Code
	sim2.setCode(sim1.getCode()+sim2.getCode());


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // structs ::= 
            {
              Simbolo RESULT =null;
		 
	RESULT = new Simbolo();
	
	//Code
	RESULT.setCode("");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	
	if(tabla.buscarStructDef(s)!=null){
		error_semantico("La struct "+ s+" ya se ha definido ");
		
	}
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              Simbolo RESULT =(Simbolo) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	tabla.set();
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struct ::= STRUCT ID NT$0 INIT_BLOCK NT$1 structvars END_BLOCK 
            {
              Simbolo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Simbolo) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	StructDefinition def = new StructDefinition(s);
	def.addAttributes(t);
	tabla.addStructDef(def);
	
	tabla.reset();
	
	//Code
	RESULT = new Simbolo();
	String code = "public class "+s+"{\n";
	
	for(int i=t.size()-1;i>-1;i--){
		Simbolo current = (Simbolo)t.get(i);
		code+=current.getCode();
	}
	code+="}";
	RESULT.setCode(code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // structvars ::= type ID END_INSTR structvars 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT= stack;
	
	sim.setNombre(nombre);
	RESULT.push(sim);
	
	//Code
	sim.setCode(sim.getCode()+" "+nombre+";\n");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // structvars ::= type ID END_INSTR 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

	RESULT=new Stack();
	sim.setNombre(nombre);
	RESULT.push(sim);
	
	//Code
	sim.setCode(sim.getCode()+" "+nombre+";\n");
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // structvars ::= type array END_INSTR structvars 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo simbolo = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

	RESULT=stack;
	simbolo.setTipo(sim.getTipo());
	RESULT.push(simbolo);
	
	//Code
	String arrayCode ="";
	int dimension = simbolo.getDimension();
	for(int i=dimension-1;i>-1;i--){
		arrayCode+="["+simbolo.getDim(i)+"]";
	
	}
	simbolo.setCode(sim.getCode()+" "+simbolo.getCode()+" = new "+sim.getCode()+arrayCode+";\n");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // structvars ::= type array END_INSTR 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo simbolo = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

	RESULT=new Stack();
	simbolo.setTipo(sim.getTipo());
	RESULT.push(simbolo);
	
	//Code
	String arrayCode ="";
	int dimension = simbolo.getDimension();
	for(int i=dimension-1;i>-1;i--){
		arrayCode+="["+simbolo.getDim(i)+"]";
	
	}
	simbolo.setCode(sim.getCode()+" "+simbolo.getCode()+" = new "+sim.getCode()+arrayCode+";\n");
	


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // functions ::= function functions 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	
	RESULT = sim2;
	sim2.setCode(sim1.getCode()+sim2.getCode());
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // functions ::= function 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

	RESULT = sim1;

 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	Simbolo function = null;
 	if(tabla.buscarGlobal(s)==null){
 		function = new Simbolo(s, null);
		function.setTipo("FUNCTION");
		for (int i=l.size()-1 ;i>-1;i--){
			Simbolo sim = (Simbolo) l.get(i);
			function.addParamType( sim.getTipo());
		}
		tabla.insertar(function);
		function.setTipo("FUNCTION");
		function.setTipoRetorno(sim1.getTipo());
 		tabla.set();
 		
 		for (int i=l.size()-1 ;i>-1;i--){
			Simbolo sim = (Simbolo) l.get(i);
			tabla.insertar(sim);
		}
 		
 	}else{
 		error_semantico("Ya se ha declarado la función "+ s);
 	}
 	
 	//Code
 	String code="";
 	
 	if(s.equals("$main")){
 		if(function.getParamTypes().size()!=0){
			error_semantico("La funcion main no puede tener argumentos");
		}
		code+="public static void main(String [] args){\nMain main = new Main();\n"+
			"main.$main();\n}\n";
 		code+="public void $main(){\n";
 	}else{
 		code ="public "+sim1.getCode()+s+"(";
	 	if(!l.isEmpty()){
		 	for(int i=l.size()-1;i>0;i--){
		 		Simbolo aux = (Simbolo)l.get(i);
		 		code += aux.getCode()+",";
		 	}
		 	Simbolo aux = (Simbolo)l.get(0);
		 	code += aux.getCode();
		 	
		 	
	 	}
	 	
	 	code += "){\n";
 	}
 	
 	function.setCode(code);
 	RESULT=function;
 	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Simbolo RESULT =(Simbolo) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sim3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim3 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim4 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			
			if(sim4.getDimension()!=sim1.getDimension()){
				error_semantico("La función "+s+" debe de retornar un valor "+
				"de dimension "+sim1.getDimension()+" y está retornando un valor de dimension "+sim4.getDimension());
			}else if(!tabla.isAssignable(sim1.getTipo(), sim4.getTipo())){
				error_semantico("La función "+s+" debe de retornar un valor "+
				"de tipo "+sim1.getTipo()+" y está retornando un valor de tipo "+sim4.getTipo());
			}
			tabla.reset();
			
			
			//Code
			String code ="";
			code+=sim2.getCode()+sim3.getCode();
			code+="return ";
			if(s.equals("$main")){
				code+=";\n}\n";
			}else{
				code+=sim4.getCode()+";\n}\n";
			}
			RESULT.setCode(RESULT.getCode()+code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function ::= FUNCTION returntype ID OPEN_PAR params CLOSE_PAR NT$2 INIT_BLOCK variables instructions RETURN id NT$3 END_INSTR END_BLOCK 
            {
              Simbolo RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Simbolo) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sim3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sim3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Simbolo sim3 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sim4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sim4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim4 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= type ID COMMA params 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = l;
				RESULT.push(sim);
				sim.setNombre(nombre);
				
				//Code
				sim.setCode(sim.getCode()+ nombre); 
				
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= type ID 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   		RESULT = new Stack();
		   		RESULT.push(sim);
		   		sim.setNombre(nombre);
		   		
		   		//Code
				sim.setCode(sim.getCode()+ nombre); 
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= 
            {
              Stack RESULT =null;
		 
		   		RESULT = new Stack();
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instructions ::= expression END_INSTR instructions 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	Simbolo sim = new Simbolo(); 
	RESULT = sim;
	
	//Code
	sim.setCode(sim1.getCode()+";\n"+sim2.getCode());
	
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instructions ::= expression END_INSTR 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	Simbolo sim = new Simbolo();
	RESULT = sim;
	
	//Code 
	sim.setCode(sim1.getCode()+";\n");
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // loop ::= WHILE OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	
	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("while("+sim1.getCode()+"){\n"+sim2.getCode()+"}\n");
	RESULT = sim;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK else 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim3 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("if("+sim1.getCode()+"){\n"+sim2.getCode()+"}"+sim3.getCode()+"\n");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // else ::= ELSE INIT_BLOCK instructions END_BLOCK 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	
	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("else{\n"+sim1.getCode()+"}\n");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else ::= 
            {
              Simbolo RESULT =null;
		 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conditions ::= condition 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	//Code
	RESULT = sim1;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conditions ::= condition logic_operator conditions 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	//Code
	RESULT=sim2;
	sim2.setCode(sim1.getCode()+sim2.getCode());
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conditions ::= OPEN_PAR condition CLOSE_PAR 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	//Code
	RESULT=sim;
	sim.setCode("("+sim.getCode()+")");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condition ::= id validate_operator id 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sim3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim3 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	Simbolo sim = new Simbolo();
	sim.setCode(sim1.getCode()+sim2.getCode()+sim3.getCode());
	RESULT=sim;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // id ::= ID 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo=tabla.buscarGlobal(s);
			
			if(simbolo==null){
				error_semantico("La variable "+s+" no se ha declarado");
			}else{
				RESULT= simbolo;
				
				simbolo.setCode(s);
			}
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id ::= literal 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			
			RESULT = sim;
		
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // id ::= ID POINT ID 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String att = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo=tabla.buscarGlobal(s);
			
			if(simbolo==null){
				error_semantico("La variable "+s+" no se ha declarado");
			}else{
				StructDefinition def =simbolo.getStructInstance().getStructDef();
				String attType= def.getTipoOf(att);
				if(attType==null){
					error_semantico("La variable de tipo struct "+s+
					" no tiene ningún atributo "+att);
				}else{
					Simbolo sim = new Simbolo();
					sim.setTipo(attType);
					RESULT= sim;
				}
				
			}	
			
			//Code
			RESULT.setCode(s+"."+att);
			
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // id ::= ID OPEN_PAR arg_list CLOSE_PAR 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack tipos = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
				Simbolo function=tabla.buscarGlobal(s);
				
	 			if(function==null){
					error_semantico("La función "+s+" no existe");	
				}else if(!function.getTipo().equals("FUNCTION")){
					error_semantico(s+" no es una función");
				}else{
					List<String> expectedTipos = function.getParamTypes();
					if(expectedTipos.size()!=tipos.size()){
						error_semantico("La función "+s+" espera "+expectedTipos.size()+
						" parámetros");
					}
					for(int i=tipos.size()-1; i>-1;i--){
						Simbolo simb = (Simbolo)tipos.get(i);
						if(!expectedTipos.get(tipos.size()-1-i).equals(simb.getTipo())){
							error_semantico("El parametro "+(tipos.size()-1-i)+
							"de la funcion "+ s+" ha de ser de tipo "+
							expectedTipos.get(tipos.size()-i));
						}
					}
				}
				Simbolo sim = new Simbolo();
				sim.setTipo(function.getTipoRetorno());
				RESULT = sim;
				
				//Code
				//todo tipos
				String list="";
				for(int i=tipos.size()-1; i>0;i--){
					Simbolo aux = (Simbolo)tipos.get(i);
					list+=aux.getCode()+", ";
				}
				Simbolo lastSymbol =(Simbolo)tipos.get(0);
				list+=lastSymbol.getCode();
				
				sim.setCode(s+"("+list+")");
				
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // id ::= ID index 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo = tabla.buscarGlobal(s);
			
 			if(simbolo==null){
				error_semantico("El array "+s+" no existe");	
			}else{
				sim.setTipo(simbolo.getTipo());
				sim.setDimension(simbolo.getDimension() - sim.getDimension());
				RESULT = sim;
			}
			
			//Code
			String codeArray="";
			int dimension = simbolo.getDimension();
	 		for(int j=dimension-1;j>-1;j--){
	 			codeArray+="["+sim.getDim(j)+"]";
	 		}
			sim.setCode(s+codeArray);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // index ::= OPEN_BRACKETS NUM_INT CLOSE_BRACKETS index 
            {
              Simbolo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	sim.increaseDim();
	RESULT = sim;
	
	//Code
	sim.setCode(sim.getCode()+" []");
	sim.addDim(num);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // index ::= OPEN_BRACKETS NUM_INT CLOSE_BRACKETS 
            {
              Simbolo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	
	Simbolo simbolo = new Simbolo();
	simbolo.setDimension(1);
	RESULT = simbolo;
	
	//Code
	simbolo.setCode("[]");
	simbolo.addDim(num);
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // validate_operator ::= EQUAL 
            {
              Simbolo RESULT =null;
		 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("==");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // validate_operator ::= NOT_EQUAL 
            {
              Simbolo RESULT =null;
		 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("!=");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // validate_operator ::= LESS_EQUAL 
            {
              Simbolo RESULT =null;
		 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("<=");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // validate_operator ::= GREATER_EQUAL 
            {
              Simbolo RESULT =null;
		 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode(">=");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // validate_operator ::= LESS 
            {
              Simbolo RESULT =null;
		 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("<");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // validate_operator ::= GREATER 
            {
              Simbolo RESULT =null;
		 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode(">");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logic_operator ::= AND 
            {
              Simbolo RESULT =null;
		 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("&&");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logic_operator ::= OR 
            {
              Simbolo RESULT =null;
		 

	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("||");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= assign 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	RESULT = sim;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= ID OPEN_PAR arg_list CLOSE_PAR 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack tipos = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
				Simbolo function=tabla.buscarGlobal(s);
				
	 			if(function==null){
					error_semantico("La función "+s+" no existe");	
				}else if(!function.getTipo().equals("FUNCTION")){
					error_semantico(s+" no es una función");
				}else{
					List<String> expectedTipos = function.getParamTypes();
					if(expectedTipos.size()!=tipos.size()){
						error_semantico("La función "+s+" espera "+expectedTipos.size()+
						" parámetros");
					}
					for(int i=tipos.size()-1; i>-1;i--){
						Simbolo simb = (Simbolo)tipos.get(i);
						if(!expectedTipos.get(tipos.size()-1-i).equals(simb.getTipo())){
							error_semantico("El parametro "+(tipos.size()-1-i)+
							"de la funcion "+ s+" ha de ser de tipo "+
							expectedTipos.get(tipos.size()-i));
						}
					}
				}
				Simbolo sim = new Simbolo();
				sim.setTipo(function.getTipoRetorno());
				RESULT = sim;
				
				//Code
				//todo tipos
				String list="";
				for(int i=tipos.size()-1; i>0;i--){
					Simbolo aux = (Simbolo)tipos.get(i);
					list+=aux.getCode()+", ";
				}
				Simbolo lastSymbol =(Simbolo)tipos.get(0);
				list+=lastSymbol.getCode();
				
				sim.setCode(s+"("+list+")");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= create_struct 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	//Code 
	RESULT = sim;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= read 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

		RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= PRINT OPEN_PAR print CLOSE_PAR 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
 	
 	//Code
	Simbolo sim = new Simbolo();
	sim.setCode("System.out.println("+sim1.getCode()+")");
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= loop 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	
	//Code
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= if 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	
	//Code
	RESULT = sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // read ::= READ OPEN_PAR ID CLOSE_PAR 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	Simbolo simbolo=tabla.buscarGlobal(s);
			
	if(simbolo==null){
		error_semantico("La variable "+s+" no existe");
	}
	
	//Code
	
	RESULT= new Simbolo();
	RESULT.setCode(tabla.getReadCode(simbolo));
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assign ::= ID ASSIGN numeric_expr 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo simbolo=tabla.buscarGlobal(s);
				
				if(simbolo==null){
					error_semantico("La variable "+s+" no existe");
				}else{
					String expectedTipo = simbolo.getTipo();
					if(!tabla.isAssignable(expectedTipo,sim.getTipo())){
						error_semantico("No se puede asignar una variable de tipo "+
						sim.getTipo()+" a una variable de tipo "+expectedTipo);
					}else if(simbolo.getDimension()!=sim.getDimension()){
						error_semantico("No se puede asignar una variable de dimensión "+
						sim.getDimension()+" a una variable de dimensión "+simbolo.getDimension());
					}
				}
				
				//Code
				Simbolo simb = new Simbolo();
				simb.setCode(s+" = "+sim.getCode());
				RESULT=simb;
				
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assign ::= ID index ASSIGN numeric_expr 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   		
		   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo simbolo=tabla.buscarGlobal(s);
				
				if(simbolo==null){
					error_semantico("La variable "+s+" no existe");
				}else{
					String expectedTipo = simbolo.getTipo();
					if(!tabla.isAssignable(expectedTipo,sim2.getTipo())){
						error_semantico("No se ha puede asignar una variable de tipo "+
						sim2.getTipo()+" a una variable de tipo "+expectedTipo);
						
					}else{
						int currentDim=simbolo.getDimension()-sim1.getDimension();
						if(currentDim!=sim2.getDimension()){
							error_semantico("No se ha puede asignar una variable de dimension "+
							sim2.getDimension()+" a una variable de dimension "+sim1.getDimension());
						}
					}
				}
				
				//Code
				Simbolo simb = new Simbolo();
				String codeArray="";
				
				int dimension = sim1.getDimension();
		 		for(int j=dimension-1;j>-1;j--){
		 			codeArray+="["+sim1.getDim(j)+"]";
		 		}
				
				simb.setCode(s+codeArray+" = "+sim2.getCode());
				RESULT=simb;
				
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assign ::= ID POINT ID ASSIGN numeric_expr 
            {
              Simbolo RESULT =null;
		int sStructleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sStructright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String sStruct = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int attNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String attName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   
		   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		   		Simbolo struct = tabla.buscarGlobal(sStruct);
		   		if(struct==null){
		   			error_semantico("No ha creado ninguna struct de nombre "+sStruct);
		   		}else{
		   			StructDefinition def = struct.getStructInstance().getStructDef();
		   			String attTipo = def.getTipoOf(attName);
		   			if(attTipo==null){
		   				error_semantico("La struct "+sStruct+" no tiene ningún atributo de nombre "+
		   				attName);
		   			}else if(struct.getDimension()!=sim.getDimension()){
						error_semantico("No se puede asignar una variable de dimensión "+
						sim.getDimension()+" a un atributo de una struct de dimensión "+struct.getDimension());
					}else if(tabla.isAssignable(attTipo, sim.getTipo())){
						Simbolo tipo = new Simbolo();
						tipo.setTipo(attTipo);
						RESULT = tipo;
		   			}else{
		   				error_semantico("No se puede asignar una variable de tipo "+
		   				sim.getTipo()+" a un atributo de una struct de tipo "+attTipo);
		   			}
		   			
		   		}
		   		
		   		//Code
				Simbolo simbolo = new Simbolo();
				simbolo.setCode(sStruct+"."+attName+" = "+sim.getCode());
				RESULT=simbolo;
		   		
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // numeric_expr ::= numeric_expr operator numeric_expr 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simOPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int simOPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo simOP = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					
					if( !tabla.isNumeric(sim1.getTipo()) || !tabla.isNumeric(sim2.getTipo()) ){
						error_semantico("Las operaciones matemáticas han de ser"+
						" entre tipos REAL o INT. No se puede operar el tipo "+sim1.getTipo()+
						" con el tipo "+sim2.getTipo());	
					}else{
					
						if(sim1.getTipo().equals("REAL") || sim2.getTipo().equals("REAL") ){
							Simbolo sim = new Simbolo();
							sim.setTipo("REAL");
							RESULT= sim;
						}else{
							Simbolo sim = new Simbolo();
							sim.setTipo("INT");
							RESULT= sim;
						}
					}
					
					//Code
					//TODO pow
					if(simOP.getCode().equals("^")){
						String code ="Math.pow(";
						code +=sim1.getCode()+", "+sim2.getCode()+")";
						RESULT.setCode(code);
					}else{
						RESULT.setCode(sim1.getCode()+simOP.getCode()+sim2.getCode());
					}
					
					
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // numeric_expr ::= id 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				 
				 	RESULT=sim;
				 	
				 	//Code
				 	
				 	
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // numeric_expr ::= MINUS id 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				 
				 	RESULT= sim;
				 	
				 	//Code
				 	sim.setCode("-"+sim.getCode());
				 	
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // numeric_expr ::= OPEN_PAR numeric_expr CLOSE_PAR 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				 
				 	RESULT= sim;
				 	
				 	
				 	//Code
				 	sim.setCode("("+sim.getCode()+")");
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operator ::= PLUS 
            {
              Simbolo RESULT =null;
		 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("+");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operator ::= MINUS 
            {
              Simbolo RESULT =null;
		 
	
	//Code
	RESULT = new Simbolo();
	RESULT.setCode("-");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operator ::= POW 
            {
              Simbolo RESULT =null;
		 
	
	//Code
	RESULT = new Simbolo();
	RESULT.setCode("^");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operator ::= MOD 
            {
              Simbolo RESULT =null;
		 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("%");
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operator ::= DIV 
            {
              Simbolo RESULT =null;
		 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("/");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operator ::= MULT 
            {
              Simbolo RESULT =null;
		 

	//Code
	RESULT = new Simbolo();
	RESULT.setCode("*");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // create_struct ::= STRUCT ID ID 
            {
              Simbolo RESULT =null;
		int structDefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int structDefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String structDef = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					StructDefinition def = tabla.buscarStructDef(structDef);
					
					if(def==null){
						error_semantico("No se ha definido un struct de nombre "+structDef);
					}else{
						Simbolo simbolo = new Simbolo(s, null);
						simbolo.createStructInstance(def);
						simbolo.setTipo("STRUCT");
						tabla.insertar(simbolo);
					}
					
					//Code
					Simbolo simbolo = new Simbolo();
					simbolo.setCode(structDef+" "+s+" = new "+structDef+"()");
					
					RESULT = simbolo;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("create_struct",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // print ::= id COMMA print 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	//Code 
	Simbolo sim = new Simbolo();
	sim.setCode(sim1.getCode()+"+"+sim2.getCode());
	RESULT=sim;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // print ::= id 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	//Code
	RESULT=sim1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arg_list ::= ID COMMA arg_list 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	
		RESULT= stack; 
		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		Simbolo simbolo=tabla.buscarGlobal(s);
				
	 	if(simbolo==null){
			error_semantico("La variable "+s+" no se ha declarado");	
		}else{
			RESULT.push(simbolo);		
		}
		
		//Code
		simbolo.setCode(s);
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arg_list ::= literal COMMA arg_list 
            {
              Stack RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo l = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

		RESULT= stack; 
		RESULT.push(l);
		
		//Code
				
		
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arg_list ::= ID 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	
		RESULT = new Stack();
		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		Simbolo simbolo=tabla.buscarGlobal(s);
				
	 	if(simbolo==null){
			error_semantico("La variable "+s+" no se ha declarado");	
		}else{
			RESULT.push(simbolo);		
		}
	 
	 	//Code
	 	simbolo.setCode(s);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arg_list ::= literal 
            {
              Stack RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo l = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 
		RESULT = new Stack();
		RESULT.push(l);
		
		//Code
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arg_list ::= 
            {
              Stack RESULT =null;
		 
		RESULT = new Stack();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= NUM_INT 
            {
              Simbolo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("INT");
	RESULT=sim;
	
	//Code
	sim.setCode(""+num); 
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= NUM_REAL 
            {
              Simbolo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("REAL");
	RESULT=sim;
	
	//Code
	sim.setCode(""+num); 
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= CHAR_LITERAL 
            {
              Simbolo RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("CHAR");
	RESULT=sim; 
	
	//Code
	sim.setCode("'"+chr+"'");
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= STRING_LITERAL 
            {
              Simbolo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 
	Simbolo sim = new Simbolo();
	sim.setTipo("STRING");
	RESULT=sim;
	
	//Code
	sim.setCode(str);
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= TRUE 
            {
              Simbolo RESULT =null;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("BOOL");
	RESULT=sim;
	
	//Code
	sim.setCode("true");
	 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= FALSE 
            {
              Simbolo RESULT =null;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("BOOL");
	RESULT=sim;
	
	//Code
	sim.setCode("false"); 
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
