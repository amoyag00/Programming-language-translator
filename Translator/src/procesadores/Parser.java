
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package procesadores;

import java_cup.runtime.*;
import java.io.*;
import java.util.Stack;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\040\004\000\002\037\006\000\002\037\002" +
    "\000\002\020\005\000\002\020\003\000\002\020\005\000" +
    "\002\020\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\033" +
    "\003\000\002\036\004\000\002\025\005\000\002\025\002" +
    "\000\002\041\002\000\002\042\002\000\002\026\011\000" +
    "\002\021\006\000\002\021\005\000\002\021\006\000\002" +
    "\021\005\000\002\027\004\000\002\027\003\000\002\043" +
    "\002\000\002\044\002\000\002\024\021\000\002\022\006" +
    "\000\002\022\004\000\002\022\002\000\002\003\005\000" +
    "\002\003\004\000\002\004\011\000\002\005\012\000\002" +
    "\006\006\000\002\006\002\000\002\007\003\000\002\007" +
    "\005\000\002\010\005\000\002\032\003\000\002\032\003" +
    "\000\002\032\005\000\002\032\006\000\002\032\004\000" +
    "\002\034\006\000\002\034\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\003\000\002\013\006\000\002\013\003\000" +
    "\002\013\010\000\002\013\006\000\002\013\003\000\002" +
    "\013\003\000\002\014\005\000\002\014\006\000\002\014" +
    "\007\000\002\031\005\000\002\031\003\000\002\031\004" +
    "\000\002\031\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\005\000\002\017\005\000\002\017" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\023\003\000\002\023\002\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\022\003\012\005\ufffc\006\ufffc\016\004\017" +
    "\011\020\015\021\007\022\005\001\002\000\006\045\ufff7" +
    "\060\ufff7\001\002\000\006\045\ufff3\060\ufff3\001\002\000" +
    "\004\002\255\001\002\000\006\045\ufff4\060\ufff4\001\002" +
    "\000\004\060\244\001\002\000\006\045\ufff6\060\ufff6\001" +
    "\002\000\004\002\uffff\001\002\000\006\005\222\006\uffef" +
    "\001\002\000\004\006\016\001\002\000\006\045\ufff5\060" +
    "\ufff5\001\002\000\004\015\021\001\002\000\006\002\uffe6" +
    "\015\021\001\002\000\004\002\001\001\002\000\014\016" +
    "\004\017\011\020\015\021\007\022\005\001\002\000\004" +
    "\060\ufff2\001\002\000\004\060\024\001\002\000\004\011" +
    "\025\001\002\000\016\012\uffe0\016\004\017\011\020\015" +
    "\021\007\022\005\001\002\000\004\060\215\001\002\000" +
    "\004\012\030\001\002\000\004\007\uffe5\001\002\000\004" +
    "\007\032\001\002\000\030\005\ufffc\016\004\017\011\020" +
    "\015\021\007\022\005\042\ufffc\043\ufffc\052\ufffc\053\ufffc" +
    "\060\ufffc\001\002\000\016\005\040\042\036\043\043\052" +
    "\034\053\046\060\045\001\002\000\004\011\210\001\002" +
    "\000\004\004\uffc1\001\002\000\004\011\202\001\002\000" +
    "\004\004\uffc5\001\002\000\004\060\200\001\002\000\004" +
    "\051\173\001\002\000\004\004\uffc2\001\002\000\004\011" +
    "\142\001\002\000\004\004\140\001\002\000\012\011\110" +
    "\013\066\023\111\046\106\001\002\000\004\011\050\001" +
    "\002\000\004\004\uffc7\001\002\000\020\047\054\050\056" +
    "\054\062\055\052\056\061\057\055\060\057\001\002\000" +
    "\004\012\105\001\002\000\044\004\uffaa\012\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\045\uffaa\001\002\000\006\012\uffb1\045\103\001\002\000" +
    "\044\004\uffa7\012\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\045\uffa7\001\002\000\044" +
    "\004\uffa8\012\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\045\uffa8\001\002\000\044\004" +
    "\uffa6\012\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\045\uffa6\001\002\000\052\004\uffd6" +
    "\011\065\012\uffd6\013\066\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\045\uffd6\046\063\001" +
    "\002\000\044\004\uffd5\012\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\045\uffd5\001\002" +
    "\000\044\004\uffa9\012\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\045\uffa9\001\002\000" +
    "\044\004\uffab\012\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\045\uffab\001\002\000\004" +
    "\060\102\001\002\000\044\004\uffd2\012\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\045" +
    "\uffd2\001\002\000\022\012\uffac\047\054\050\056\054\062" +
    "\055\052\056\061\057\055\060\073\001\002\000\004\054" +
    "\067\001\002\000\004\014\070\001\002\000\050\004\uffd0" +
    "\012\uffd0\013\066\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\045\uffd0\001\002\000" +
    "\046\004\uffd1\012\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\045\uffd1\001\002" +
    "\000\004\012\101\001\002\000\006\012\uffae\045\077\001" +
    "\002\000\006\012\uffad\045\075\001\002\000\022\012\uffac" +
    "\047\054\050\056\054\062\055\052\056\061\057\055\060" +
    "\073\001\002\000\004\012\uffaf\001\002\000\022\012\uffac" +
    "\047\054\050\056\054\062\055\052\056\061\057\055\060" +
    "\073\001\002\000\004\012\uffb0\001\002\000\044\004\uffd3" +
    "\012\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\045\uffd3\001\002\000\044\004\uffd4\012" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\045\uffd4\001\002\000\020\047\054\050\056" +
    "\054\062\055\052\056\061\057\055\060\057\001\002\000" +
    "\004\012\uffb2\001\002\000\004\004\uffc3\001\002\000\004" +
    "\060\135\001\002\000\004\023\133\001\002\000\022\012" +
    "\uffac\047\054\050\056\054\062\055\052\056\061\057\055" +
    "\060\073\001\002\000\024\011\113\035\112\047\054\050" +
    "\056\054\062\055\052\056\061\057\055\060\057\001\002" +
    "\000\020\047\054\050\056\054\062\055\052\056\061\057" +
    "\055\060\057\001\002\000\024\011\113\035\112\047\054" +
    "\050\056\054\062\055\052\056\061\057\055\060\057\001" +
    "\002\000\022\004\uffbc\012\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\001\002\000\020\004\uffc0\034" +
    "\122\035\123\036\124\037\116\040\117\041\121\001\002" +
    "\000\020\047\uffb6\050\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\001\002\000\020\047\uffb4\050\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000\020\047" +
    "\054\050\056\054\062\055\052\056\061\057\055\060\057" +
    "\001\002\000\020\047\uffb7\050\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\001\002\000\020\047\uffb9\050\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002\000" +
    "\020\047\uffb8\050\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\001\002\000\020\047\uffb5\050\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002\000\022\004\uffbd" +
    "\012\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\001\002\000\020\012\127\034\122\035\123\036\124" +
    "\037\116\040\117\041\121\001\002\000\022\004\uffba\012" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\001\002\000\022\004\uffbb\012\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\001\002\000\004\012\132" +
    "\001\002\000\004\004\uffc6\001\002\000\024\011\113\035" +
    "\112\047\054\050\056\054\062\055\052\056\061\057\055" +
    "\060\057\001\002\000\020\004\uffbf\034\122\035\123\036" +
    "\124\037\116\040\117\041\121\001\002\000\004\023\136" +
    "\001\002\000\024\011\113\035\112\047\054\050\056\054" +
    "\062\055\052\056\061\057\055\060\057\001\002\000\020" +
    "\004\uffbe\034\122\035\123\036\124\037\116\040\117\041" +
    "\121\001\002\000\022\005\040\010\uffde\042\036\043\043" +
    "\051\uffde\052\034\053\046\060\045\001\002\000\006\010" +
    "\uffdf\051\uffdf\001\002\000\020\047\054\050\056\054\062" +
    "\055\052\056\061\057\055\060\057\001\002\000\016\024" +
    "\170\025\165\026\167\027\164\030\171\031\166\001\002" +
    "\000\010\012\uffd9\032\160\033\161\001\002\000\004\012" +
    "\146\001\002\000\004\007\147\001\002\000\016\005\040" +
    "\042\036\043\043\052\034\053\046\060\045\001\002\000" +
    "\004\010\151\001\002\000\006\004\uffda\044\152\001\002" +
    "\000\004\007\154\001\002\000\004\004\uffdc\001\002\000" +
    "\016\005\040\042\036\043\043\052\034\053\046\060\045" +
    "\001\002\000\004\010\156\001\002\000\004\004\uffdb\001" +
    "\002\000\020\047\054\050\056\054\062\055\052\056\061" +
    "\057\055\060\057\001\002\000\020\047\uffc9\050\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\001\002\000\020" +
    "\047\uffc8\050\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\001\002\000\004\012\uffd8\001\002\000\020\047\054" +
    "\050\056\054\062\055\052\056\061\057\055\060\057\001" +
    "\002\000\020\047\uffce\050\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\001\002\000\020\047\uffca\050\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\060\uffca\001\002\000\020" +
    "\047\uffcc\050\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\001\002\000\020\047\uffcf\050\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\001\002\000\020\047\uffcb\050" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\001\002" +
    "\000\020\047\uffcd\050\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\001\002\000\010\012\uffd7\032\uffd7\033\uffd7" +
    "\001\002\000\020\047\054\050\056\054\062\055\052\056" +
    "\061\057\055\060\057\001\002\000\004\004\uffe4\001\002" +
    "\000\004\004\176\001\002\000\004\010\177\001\002\000" +
    "\006\002\uffe3\015\uffe3\001\002\000\004\060\201\001\002" +
    "\000\004\004\uffb3\001\002\000\020\047\054\050\056\054" +
    "\062\055\052\056\061\057\055\060\057\001\002\000\004" +
    "\012\204\001\002\000\004\007\205\001\002\000\016\005" +
    "\040\042\036\043\043\052\034\053\046\060\045\001\002" +
    "\000\004\010\207\001\002\000\004\004\uffdd\001\002\000" +
    "\014\016\004\017\011\020\015\021\007\022\005\001\002" +
    "\000\004\045\212\001\002\000\020\047\054\050\056\054" +
    "\062\055\052\056\061\057\055\060\057\001\002\000\004" +
    "\012\214\001\002\000\004\004\uffc4\001\002\000\006\012" +
    "\uffe1\045\216\001\002\000\016\012\uffe0\016\004\017\011" +
    "\020\015\021\007\022\005\001\002\000\004\012\uffe2\001" +
    "\002\000\004\002\uffe7\001\002\000\004\006\ufffe\001\002" +
    "\000\004\060\226\001\002\000\004\004\224\001\002\000" +
    "\006\005\222\006\uffef\001\002\000\004\006\ufff0\001\002" +
    "\000\004\007\uffee\001\002\000\004\007\230\001\002\000" +
    "\014\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\001\002" +
    "\000\014\016\004\017\011\020\015\021\007\022\005\001" +
    "\002\000\004\060\235\001\002\000\004\010\234\001\002" +
    "\000\004\004\uffec\001\002\000\006\004\241\013\066\001" +
    "\002\000\004\004\237\001\002\000\016\010\uffe8\016\004" +
    "\017\011\020\015\021\007\022\005\001\002\000\004\010" +
    "\uffe9\001\002\000\016\010\uffea\016\004\017\011\020\015" +
    "\021\007\022\005\001\002\000\006\004\ufff1\045\ufff1\001" +
    "\002\000\004\010\uffeb\001\002\000\010\004\ufffa\013\066" +
    "\045\253\001\002\000\004\004\251\001\002\000\006\004" +
    "\ufff8\045\247\001\002\000\004\060\244\001\002\000\004" +
    "\004\ufff9\001\002\000\032\005\ufffc\006\ufffc\016\004\017" +
    "\011\020\015\021\007\022\005\042\ufffc\043\ufffc\052\ufffc" +
    "\053\ufffc\060\ufffc\001\002\000\020\005\ufffd\006\ufffd\042" +
    "\ufffd\043\ufffd\052\ufffd\053\ufffd\060\ufffd\001\002\000\004" +
    "\060\244\001\002\000\004\004\ufffb\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\012\002\005\035\007\037\012\040\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\244\036\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\220\026\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\016\027\017\001\001\000\006\024\016\027\217\001\001" +
    "\000\002\001\001\000\006\033\022\035\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\026\035\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\030\001\001\000\002\001\001\000\006" +
    "\035\007\037\032\001\001\000\016\003\040\004\041\005" +
    "\034\013\043\014\046\016\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\050\030\057" +
    "\032\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\071\030\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\075\030\073\001\001\000\002\001\001" +
    "\000\006\023\077\030\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\103\030\057" +
    "\032\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\130\030\073" +
    "\001\001\000\010\030\057\031\114\032\113\001\001\000" +
    "\006\030\057\032\127\001\001\000\010\030\057\031\125" +
    "\032\113\001\001\000\002\001\001\000\004\015\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\057" +
    "\032\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\057\031\133" +
    "\032\113\001\001\000\004\015\117\001\001\000\002\001" +
    "\001\000\010\030\057\031\136\032\113\001\001\000\004" +
    "\015\117\001\001\000\016\003\140\004\041\005\034\013" +
    "\043\014\046\016\036\001\001\000\002\001\001\000\012" +
    "\007\144\010\143\030\057\032\142\001\001\000\004\011" +
    "\162\001\001\000\004\012\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\147\004\041\005\034\013" +
    "\043\014\046\016\036\001\001\000\002\001\001\000\004" +
    "\006\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\154\004\041\005\034\013\043\014\046\016\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\161\010\143\030\057\032\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\057\032" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\057\032\173\001\001" +
    "\000\004\044\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\202\010\143\030\057\032\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\205\004\041" +
    "\005\034\013\043\014\046\016\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\210\001\001\000\002" +
    "\001\001\000\006\030\057\032\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\216" +
    "\035\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\224\026\222\001\001\000\002\001\001\000\004\041" +
    "\226\001\001\000\002\001\001\000\004\042\230\001\001" +
    "\000\006\021\232\035\231\001\001\000\004\036\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\241" +
    "\001\001\000\002\001\001\000\006\021\237\035\231\001" +
    "\001\000\002\001\001\000\006\021\242\035\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\247" +
    "\036\245\001\001\000\002\001\001\000\006\035\007\037" +
    "\251\001\001\000\002\001\001\000\006\020\253\036\245" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		TablaSimbolos tabla = new TablaSimbolos();
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader,tabla);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico=analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		x.printStackTrace();
		System.out.println("Error fatal.");
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis: linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);    
}

public void error_semantico(String msg){
	System.out.println("Error semantico. "+msg+". Linea "+analizadorLexico.linea()+". Columna: "+analizadorLexico.columna());
	System.exit(-1);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarations END_STRUCT functions 
            {
              Object RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	Simbolo main=tabla.buscarGlobal("$main");
	if( main==null ){
		error_semantico("No se ha declarado una funcion main");
	}else if(!main.getTipo().equals("FUNCTION")){
		error_semantico("No se ha declarado una funcion main");
	} 
		
	
	JavaGenerator jGen = new JavaGenerator();
	jGen.addCode(sim1.getCode()+"\n"+sim2.getCode());
	jGen.closeMain();
	jGen.generate();


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Object RESULT =null;
		 
	this.parser.error_sintactico(this.parser.cur_token);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= variables structs 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  

	RESULT = sim1;
	
	//Code
	sim1.setCode(sim1.getCode()+sim2.getCode());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variables ::= type list END_INSTR variables 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT=sim2;
	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	for (int i=0 ;i<l.size();i++){
		Simbolo simbolo = (Simbolo) l.get(i);
		
		String nombre =simbolo.getNombre();
		Simbolo aux= tabla.buscar(nombre);
		if(aux == null){
			//aux = new Simbolo(nombre, null);
			tabla.insertar(simbolo);
			simbolo.setTipo(sim.getTipo());
		}else{
			error_semantico("La variable "+ aux.nombre+" ya se ha declarado ");
		}
		
	}
	
	//Code
	
	String code = sim.getCode();
	for (int i=l.size()-1 ;i>0;i--){
		Simbolo simbolo = (Simbolo) l.get(i);
		
		if(simbolo.getDimension()!=0){//is array
			String codeArray=simbolo.getCode()+"= new "+sim.getCode();
	 	
		 	int dimension = simbolo.getDimension();
	 		for(int j=dimension-1;j>-1;j--){
	 			codeArray+="["+simbolo.getDim(j)+"]";
	 		}
	 		
	 		code+=codeArray+", ";	
		}else{
			code +=simbolo.getCode()+", ";
		}
	}
	
	
	Simbolo lastSymbol =(Simbolo) l.get(0);
	
	if(lastSymbol.getDimension()!=0){//is array
		String codeArray=lastSymbol.getCode()+"= new "+sim.getCode();
	 	
	 	int dimension = lastSymbol.getDimension();
 		for(int i=dimension-1;i>-1;i--){
 			codeArray+="["+lastSymbol.getDim(i)+"]";
 		
 		}
 		//es por qui
 		code+=codeArray+";";
 		
	}else{
		code+=lastSymbol.getCode()+";";
		
	}
	
	sim2.setCode(code+"\n"+sim2.getCode());
	
 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variables ::= 
            {
              Simbolo RESULT =null;
		
	
	RESULT = new Simbolo();
	
	//Code
	RESULT.setCode("");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list ::= ID COMMA list 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

			 RESULT =l;
			 Simbolo sim = new Simbolo();
			 sim.setNombre(s);
			 RESULT.push(sim);
			 
			 //Code
			sim.setCode(s); 
			 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list ::= ID 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
			 RESULT = new Stack();
			 Simbolo sim = new Simbolo();
			 sim.setNombre(s);
			 RESULT.push(sim);
			 
			 //Code
			 sim.setCode(s);
			 
	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list ::= array COMMA list 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 	
	 		RESULT = l;
			RESULT.push(sim);
			
			//Code
			//Made in array
			
	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list ::= array 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	 	
	 		RESULT = new Stack();
	 		RESULT.push(sim);
	 		//Code
	 		
	 		
	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INT 
            {
              Simbolo RESULT =null;
		

		Simbolo sim = new Simbolo();
		sim.setTipo("INT");
		RESULT = sim; 
		
		//Code
		sim.setCode("int ");
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= REAL 
            {
              Simbolo RESULT =null;
		
	
		Simbolo sim = new Simbolo();
		sim.setTipo("REAL");
		RESULT = sim;
		
		//Code
		sim.setCode("float "); 
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= CHAR 
            {
              Simbolo RESULT =null;
		 
	
		Simbolo sim = new Simbolo();
		sim.setTipo("CHAR");
		RESULT = sim;
		
		//Code
		sim.setCode("char ");
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= STRING 
            {
              Simbolo RESULT =null;
		
	
		Simbolo sim = new Simbolo();
		sim.setTipo("STRING");
		RESULT = sim;
		
		//Code
		sim.setCode("String ");
		 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= BOOL 
            {
              Simbolo RESULT =null;
		
	
		Simbolo sim = new Simbolo();
		sim.setTipo("BOOL");
		RESULT = sim;
		
		//Code
		sim.setCode("boolean ");
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // returntype ::= type 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	RESULT = sim; 
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returntype",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // array ::= ID index 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	sim.setNombre(s);
	RESULT=sim;
	
	//Code
	sim.setCode(s+" "+sim.getCode());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // structs ::= struct END_INSTR structs 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	RESULT= sim2;
	
	//Code
	sim2.setCode(sim1.getCode()+sim2.getCode());


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // structs ::= 
            {
              Simbolo RESULT =null;
		 
	RESULT = new Simbolo();
	
	//Code
	RESULT.setCode("");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	
	if(tabla.buscarStructDef(s)!=null){
		error_semantico("La struct "+ s+" ya se ha definido ");
		
	}
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              Simbolo RESULT =(Simbolo) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	tabla.set();
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // struct ::= STRUCT ID NT$0 INIT_BLOCK NT$1 structvars END_BLOCK 
            {
              Simbolo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Simbolo) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	StructDefinition def = new StructDefinition(s);
	def.addAttributes(t);
	tabla.addStructDef(def);
	
	tabla.reset();
	
	//Code
	RESULT = new Simbolo();
	String code = "public class "+s+"{\n";
	
	for(int i=t.size()-1;i>-1;i--){
		Simbolo current = (Simbolo)t.get(i);
		code+=current.getCode();
	}
	code+="}";
	RESULT.setCode(code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // structvars ::= type ID END_INSTR structvars 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT= stack;
	
	sim.setNombre(nombre);
	RESULT.push(sim);
	
	//Code
	sim.setCode(sim.getCode()+" "+nombre+";\n");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // structvars ::= type ID END_INSTR 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

	RESULT=new Stack();
	//TODO cuidado aqui
	sim.setNombre(nombre);
	RESULT.push(sim);
	
	//Code
	sim.setCode(sim.getCode()+" "+nombre+";\n");
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // structvars ::= type array END_INSTR structvars 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo simbolo = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

	RESULT=stack;
	//TODO cuidado aqui
	simbolo.setTipo(sim.getTipo());
	RESULT.push(simbolo);
	
	//Code
	String arrayCode ="";
	int dimension = simbolo.getDimension();
	for(int i=dimension-1;i>-1;i--){
		arrayCode+="["+simbolo.getDim(i)+"]";
	
	}
	simbolo.setCode(sim.getCode()+" "+simbolo.getCode()+" = new "+sim.getCode()+arrayCode+";\n");


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // structvars ::= type array END_INSTR 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo simbolo = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

	RESULT=new Stack();
	//TODO cuidado aqui
	simbolo.setTipo(sim.getTipo());
	RESULT.push(simbolo);
	
	//Code
	String arrayCode ="";
	int dimension = simbolo.getDimension();
	for(int i=dimension-1;i>-1;i--){
		arrayCode+="["+simbolo.getDim(i)+"]";
	
	}
	simbolo.setCode(sim.getCode()+" "+simbolo.getCode()+" = new "+sim.getCode()+arrayCode+";\n");
	


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // functions ::= function functions 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	
	RESULT = sim2;
	sim2.setCode(sim1.getCode()+sim2.getCode());
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // functions ::= function 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

	RESULT = sim1;

 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	Simbolo function = null;
 	if(tabla.buscarGlobal(s)==null){
 		function = new Simbolo(s, null);
		function.setTipo("FUNCTION");
		for (int i=l.size()-1 ;i>-1;i--){
			Simbolo sim = (Simbolo) l.get(i);
			function.addParamType( sim.getTipo());
		}
		tabla.insertar(function);
		function.setTipo("FUNCTION");
		function.setTipoRetorno(sim1.getTipo());
 		tabla.set();
 		
 		for (int i=l.size()-1 ;i>-1;i--){
			Simbolo sim = (Simbolo) l.get(i);
			tabla.insertar(sim);
		}
 		
 	}else{
 		error_semantico("Ya se ha declarado la función "+ s);
 	}
 	
 	//Code
 	String code="";
 	
 	if(s.equals("$main")){
 		if(function.getParamTypes().size()!=0){
			error_semantico("La funcion main no puede tener argumentos");
		}
 		code+="public static void main(String [] args){";
 	}else{
 		code ="public "+sim1.getCode()+s+"(";
	 	if(!l.isEmpty()){
		 	for(int i=l.size()-1;i>0;i--){
		 		Simbolo aux = (Simbolo)l.get(i);
		 		code += aux.getCode()+",";
		 	}
		 	Simbolo aux = (Simbolo)l.get(0);
		 	code += aux.getCode();
		 	code += "){\n";
		 	
	 	}
 	}
 	
 	function.setCode(code);
 	RESULT=function;
 	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Simbolo RESULT =(Simbolo) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			if(!tabla.isAssignable(sim1.getTipo(), sim2.getTipo())){
				error_semantico("La función "+s+" debe de retornar un valor "+
				"de tipo "+sim1.getTipo()+" y está retornando un valor de tipo "+sim2.getTipo());
			}
			tabla.reset();
			
			
			//Code
			String code ="";
			
			code+="return ";
			if(s.equals("$main")){
				code+=";\n}\n";
			}else{
				code+="id"+";\n}\n";
			}
			RESULT.setCode(RESULT.getCode()+code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function ::= FUNCTION returntype ID OPEN_PAR params CLOSE_PAR NT$2 INIT_BLOCK variables instructions RETURN id NT$3 END_INSTR END_BLOCK 
            {
              Simbolo RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Simbolo) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= type ID COMMA params 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = l;
				RESULT.push(sim);
				sim.setNombre(nombre);
				
				//Code
				sim.setCode(sim.getCode()+ nombre); 
				
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= type ID 
            {
              Stack RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   		RESULT = new Stack();
		   		RESULT.push(sim);
		   		sim.setNombre(nombre);
		   		
		   		//Code
				sim.setCode(sim.getCode()+ nombre); 
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= 
            {
              Stack RESULT =null;
		 
		   		RESULT = new Stack();
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instructions ::= expression END_INSTR instructions 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instructions ::= expression END_INSTR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // loop ::= WHILE OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK else 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // else ::= ELSE INIT_BLOCK instructions END_BLOCK 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conditions ::= condition 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conditions ::= condition logic_operator conditions 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condition ::= id validate_operator id 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id ::= ID 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo=tabla.buscarGlobal(s);
			
			if(simbolo==null){
				error_semantico("La variable "+s+" no se ha declarado");
			}else{
				RESULT= simbolo;
			}
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // id ::= literal 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			
			RESULT = sim;
		
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id ::= ID POINT ID 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String att = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo=tabla.buscarGlobal(s);
			
			if(simbolo==null){
				System.out.println("La variable "+s+" no se ha declarado");
			}else{
				StructDefinition def =simbolo.getStructInstance().getStructDef();
				String attType= def.getTipoOf(att);
				if(attType==null){
					error_semantico("La variable de tipo struct "+s+
					" no tiene ningún atributo "+att);
				}else{
					Simbolo sim = new Simbolo();
					sim.setTipo(attType);
					RESULT= sim;
				}
				
			}	
			
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // id ::= ID OPEN_PAR arg_list CLOSE_PAR 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack tipos = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
				Simbolo function=tabla.buscarGlobal(s);
				
	 			if(function==null){
					error_semantico("La función "+s+" no existe");	
				}else if(!function.getTipo().equals("FUNCTION")){
					error_semantico(s+" no es una función");
				}else{
					List<String> expectedTipos = function.getParamTypes();
					if(expectedTipos.size()!=tipos.size()){
						error_semantico("La función "+s+" espera "+expectedTipos.size()+
						" parámetros");
					}
					for(int i=tipos.size()-1; i>-1;i--){
						if(!expectedTipos.get(tipos.size()-1-i).equals(tipos.get(i))){
							error_semantico("El parametro "+(tipos.size()-1-i)+
							"de la funcion "+ s+" ha de ser de tipo "+
							expectedTipos.get(tipos.size()-i));
						}
					}
				}
				Simbolo sim = new Simbolo();
				sim.setTipo(function.getTipoRetorno());
				RESULT = sim;
				
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // id ::= ID index 
            {
              Simbolo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo = tabla.buscarGlobal(s);
			
 			if(simbolo==null){
				error_semantico("El array "+s+" no existe");	
			}else{
				sim.setTipo(simbolo.getTipo());
				sim.setDimension(simbolo.getDimension() - sim.getDimension());
				RESULT = sim;
				
			
			}
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // index ::= OPEN_BRACKETS NUM_INT CLOSE_BRACKETS index 
            {
              Simbolo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

	sim.increaseDim();
	RESULT = sim;
	
	//Code
	sim.setCode(sim.getCode()+" []");
	sim.addDim(num);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // index ::= OPEN_BRACKETS NUM_INT CLOSE_BRACKETS 
            {
              Simbolo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	
	Simbolo simbolo = new Simbolo();
	simbolo.setDimension(1);
	RESULT = simbolo;
	
	//Code
	simbolo.setCode("[]");
	simbolo.addDim(num);
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // validate_operator ::= EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // validate_operator ::= NOT_EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // validate_operator ::= LESS_EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // validate_operator ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // validate_operator ::= LESS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // validate_operator ::= GREATER 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logic_operator ::= AND 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logic_operator ::= OR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= assign 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= ID OPEN_PAR arg_list CLOSE_PAR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack tipos = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo function=tabla.buscarGlobal(s);
					
		 			if(function==null){
						error_semantico("La función "+s+" no existe");	
					}else if(!function.getTipo().equals("FUNCTION")){
						error_semantico(s+" no es una función");
					}else{
						List<String> expectedTipos = function.getParamTypes();
						if(expectedTipos.size()!=tipos.size()){
							error_semantico("La función "+s+" espera "+expectedTipos.size()+
							" parámetros");
						}
						for(int i=tipos.size()-1; i>-1;i--){
							if(!expectedTipos.get(tipos.size()-1-i).equals(tipos.get(i))){
								error_semantico("El parametro "+(tipos.size()-i)+
								" de la funcion "+ s+" ha de ser de tipo "+
								expectedTipos.get(tipos.size()-1-i));
							}
						}
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= create_struct 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= READ OPEN_PAR type COMMA id CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= PRINT OPEN_PAR print CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= loop 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= if 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assign ::= ID ASSIGN numeric_expr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo simbolo=tabla.buscarGlobal(s);
				
				if(simbolo==null){
					error_semantico("La variable "+s+" no existe");
				}else{
					String expectedTipo = simbolo.getTipo();
					if(!tabla.isAssignable(expectedTipo,sim.getTipo())){
						System.out.println("No se puede asignar una variable de tipo "+
						sim.getTipo()+" a una variable de tipo "+expectedTipo);
					}else if(simbolo.getDimension()!=sim.getDimension()){
						System.out.println("No se puede asignar una variable de dimensión "+
						sim.getDimension()+" a una variable de dimensión "+simbolo.getDimension());
					}
				}
				
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assign ::= ID index ASSIGN numeric_expr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   		
		   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo simbolo=tabla.buscarGlobal(s);
				
				if(simbolo==null){
					error_semantico("La variable "+s+" no existe");
				}else{
					String expectedTipo = simbolo.getTipo();
					if(!tabla.isAssignable(expectedTipo,sim.getTipo())){
						System.out.println("No se ha puede asignar una variable de tipo "+
						sim.getTipo()+" a una variable de tipo "+expectedTipo);
					}
				}
				
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assign ::= ID POINT ID ASSIGN numeric_expr 
            {
              Object RESULT =null;
		int sStructleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sStructright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String sStruct = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int attNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String attName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   
		   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		   		Simbolo struct = tabla.buscarGlobal(sStruct);
		   		if(struct==null){
		   			error_semantico("No ha creado ninguna struct de nombre "+sStruct);
		   		}else{
		   			StructDefinition def = struct.getStructInstance().getStructDef();
		   			String attTipo = def.getTipoOf(attName);
		   			if(attTipo==null){
		   				error_semantico("La struct "+sStruct+" no tiene ningún atributo de nombre "+
		   				attName);
		   			}else if(struct.getDimension()!=sim.getDimension()){
						error_semantico("No se puede asignar una variable de dimensión "+
						sim.getDimension()+" a un atributo de una struct de dimensión "+struct.getDimension());
					}else if(tabla.isAssignable(attTipo, sim.getTipo())){
						RESULT = attTipo;
		   			}else{
		   				error_semantico("No se puede asignar una variable de tipo "+
		   				sim.getTipo()+" a un atributo de una struct de tipo "+attTipo);
		   			}
		   			
		   		}
		   		
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // numeric_expr ::= numeric_expr operator id 
            {
              Simbolo RESULT =null;
		int sim1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sim1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo sim1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sim2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sim2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					
					if( !tabla.isNumeric(sim1.getTipo()) || !tabla.isNumeric(sim2.getTipo()) ){
						error_semantico("Las operaciones matemáticas han de ser"+
						" entre tipos REAL o INT. No se puede operar el tipo "+sim1.getTipo()+
						" con el tipo "+sim2.getTipo());	
					}else{
					
						if(sim1.getTipo().equals("REAL") || sim2.getTipo().equals("REAL") ){
							Simbolo sim = new Simbolo();
							sim.setTipo("REAL");
							RESULT= sim;
						}else{
							Simbolo sim = new Simbolo();
							sim.setTipo("INT");
							RESULT= sim;
						}
					}
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // numeric_expr ::= id 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				 
				 	RESULT=sim;
				 	
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // numeric_expr ::= MINUS id 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				 
				 	RESULT= sim;
				 	
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // numeric_expr ::= OPEN_PAR numeric_expr CLOSE_PAR 
            {
              Simbolo RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo sim = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				 
				 	RESULT= sim;
				 	
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operator ::= PLUS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operator ::= MINUS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operator ::= POW 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operator ::= MOD 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operator ::= DIV 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operator ::= MULT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // create_struct ::= STRUCT ID ID 
            {
              Object RESULT =null;
		int structDefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int structDefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String structDef = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					StructDefinition def = tabla.buscarStructDef(structDef);
					
					if(def==null){
						error_semantico("No se ha definido un struct de nombre "+structDef);
					}else{
						Simbolo simbolo = new Simbolo(s, null);
						simbolo.createStructInstance(def);
						simbolo.setTipo("STRUCT");
						tabla.insertar(simbolo);
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("create_struct",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // print ::= id COMMA print 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // print ::= id 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arg_list ::= ID COMMA arg_list 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	
		RESULT= stack; 
		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		Simbolo simbolo=tabla.buscarGlobal(s);
				
	 	if(simbolo==null){
			error_semantico("La variable "+s+" no se ha declarado");	
		}else{
			RESULT.push(simbolo.getTipo());		
		}
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arg_list ::= literal COMMA arg_list 
            {
              Stack RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo l = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

		RESULT= stack; 
		RESULT.push(l);		
		
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arg_list ::= ID 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	
		RESULT = new Stack();
		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		Simbolo simbolo=tabla.buscarGlobal(s);
				
	 	if(simbolo==null){
			error_semantico("La variable "+s+" no se ha declarado");	
		}else{
			RESULT.push(simbolo.getTipo());		
		}
	 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arg_list ::= literal 
            {
              Stack RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo l = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 
		RESULT = new Stack();
		RESULT.push(l);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arg_list ::= 
            {
              Stack RESULT =null;
		 
		RESULT = new Stack();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal ::= NUM_INT 
            {
              Simbolo RESULT =null;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("INT");
	RESULT=sim; 
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal ::= NUM_REAL 
            {
              Simbolo RESULT =null;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("REAL");
	RESULT=sim; 
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= CHAR_LITERAL 
            {
              Simbolo RESULT =null;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("CHAR");
	RESULT=sim; 
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= STRING_LITERAL 
            {
              Simbolo RESULT =null;
		
 
	Simbolo sim = new Simbolo();
	sim.setTipo("STRING");
	RESULT=sim;
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= TRUE 
            {
              Simbolo RESULT =null;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("BOOL");
	RESULT=sim;
	 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= FALSE 
            {
              Simbolo RESULT =null;
		 

	Simbolo sim = new Simbolo();
	sim.setTipo("BOOL");
	RESULT=sim; 
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
