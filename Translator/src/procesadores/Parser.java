
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package procesadores;

import java_cup.runtime.*;
import java.io.*;
import java.util.Stack;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\032\006\000\002\032\002\000\002\030\005" +
    "\000\002\030\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\041\003\000\002\031\010\000\002\004" +
    "\005\000\002\004\002\000\002\005\007\000\002\033\006" +
    "\000\002\033\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\006\004\000\002\006\003\000\002\007\017\000\002\034" +
    "\006\000\002\034\004\000\002\034\002\000\002\010\005" +
    "\000\002\010\004\000\002\011\011\000\002\012\012\000" +
    "\002\013\006\000\002\013\002\000\002\014\003\000\002" +
    "\014\005\000\002\015\005\000\002\040\003\000\002\040" +
    "\003\000\002\040\005\000\002\040\006\000\002\040\004" +
    "\000\002\025\006\000\002\025\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\006\000\002\020\003" +
    "\000\002\020\010\000\002\020\006\000\002\020\003\000" +
    "\002\020\003\000\002\021\005\000\002\021\006\000\002" +
    "\021\007\000\002\037\005\000\002\037\003\000\002\037" +
    "\004\000\002\037\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\005\000\002\024\005\000\002" +
    "\024\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\035\003\000\002\035\002\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\022\005\ufffd\006\ufffd\016\004\017\013\020" +
    "\016\021\010\022\005\054\006\001\002\000\006\045\ufffa" +
    "\061\ufffa\001\002\000\006\045\ufff6\061\ufff6\001\002\000" +
    "\004\011\251\001\002\000\004\002\250\001\002\000\006" +
    "\045\ufff7\061\ufff7\001\002\000\006\045\ufff5\061\ufff5\001" +
    "\002\000\004\061\242\001\002\000\006\045\ufff9\061\ufff9" +
    "\001\002\000\006\005\226\006\ufff1\001\002\000\004\006" +
    "\017\001\002\000\006\045\ufff8\061\ufff8\001\002\000\004" +
    "\015\022\001\002\000\006\002\uffe7\015\022\001\002\000" +
    "\004\002\001\001\002\000\014\016\031\017\025\020\030" +
    "\021\024\022\027\001\002\000\004\061\ufff4\001\002\000" +
    "\004\061\uffea\001\002\000\004\061\uffec\001\002\000\004" +
    "\061\032\001\002\000\004\061\uffe9\001\002\000\004\061" +
    "\uffeb\001\002\000\004\061\uffed\001\002\000\004\011\033" +
    "\001\002\000\020\012\uffe3\016\004\017\013\020\016\021" +
    "\010\022\005\054\006\001\002\000\004\012\041\001\002" +
    "\000\004\061\036\001\002\000\006\012\uffe4\045\037\001" +
    "\002\000\020\012\uffe3\016\004\017\013\020\016\021\010" +
    "\022\005\054\006\001\002\000\004\012\uffe5\001\002\000" +
    "\004\007\042\001\002\000\032\005\ufffd\016\004\017\013" +
    "\020\016\021\010\022\005\042\ufffd\043\ufffd\052\ufffd\053" +
    "\ufffd\054\006\061\ufffd\001\002\000\016\005\050\042\046" +
    "\043\053\052\044\053\056\061\055\001\002\000\004\011" +
    "\217\001\002\000\004\004\uffc4\001\002\000\004\011\211" +
    "\001\002\000\004\004\uffc8\001\002\000\004\061\207\001" +
    "\002\000\004\051\203\001\002\000\004\004\uffc5\001\002" +
    "\000\004\011\152\001\002\000\004\004\150\001\002\000" +
    "\012\011\120\013\076\023\121\046\116\001\002\000\004" +
    "\011\060\001\002\000\004\004\uffca\001\002\000\020\047" +
    "\064\050\066\055\072\056\062\057\071\060\065\061\067" +
    "\001\002\000\004\012\115\001\002\000\046\004\uffad\012" +
    "\uffad\014\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\045\uffad\001\002\000\006\012\uffb4" +
    "\045\113\001\002\000\046\004\uffaa\012\uffaa\014\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\045\uffaa\001\002\000\046\004\uffab\012\uffab\014\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\045\uffab\001\002\000\046\004\uffa9\012\uffa9\014" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\045\uffa9\001\002\000\054\004\uffd9\011\075" +
    "\012\uffd9\013\076\014\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\045\uffd9\046\073\001" +
    "\002\000\046\004\uffd8\012\uffd8\014\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\045\uffd8" +
    "\001\002\000\046\004\uffac\012\uffac\014\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\045" +
    "\uffac\001\002\000\046\004\uffae\012\uffae\014\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\045\uffae\001\002\000\004\061\112\001\002\000\046\004" +
    "\uffd5\012\uffd5\014\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\045\uffd5\001\002\000\022" +
    "\012\uffaf\047\064\050\066\055\072\056\062\057\071\060" +
    "\065\061\103\001\002\000\020\047\064\050\066\055\072" +
    "\056\062\057\071\060\065\061\067\001\002\000\004\014" +
    "\100\001\002\000\052\004\uffd3\012\uffd3\013\076\014\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\045\uffd3\001\002\000\050\004\uffd4\012" +
    "\uffd4\014\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\045\uffd4\001\002\000\004" +
    "\012\111\001\002\000\006\012\uffb1\045\107\001\002\000" +
    "\006\012\uffb0\045\105\001\002\000\022\012\uffaf\047\064" +
    "\050\066\055\072\056\062\057\071\060\065\061\103\001" +
    "\002\000\004\012\uffb2\001\002\000\022\012\uffaf\047\064" +
    "\050\066\055\072\056\062\057\071\060\065\061\103\001" +
    "\002\000\004\012\uffb3\001\002\000\046\004\uffd6\012\uffd6" +
    "\014\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\045\uffd6\001\002\000\046\004\uffd7\012" +
    "\uffd7\014\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\045\uffd7\001\002\000\020\047\064" +
    "\050\066\055\072\056\062\057\071\060\065\061\067\001" +
    "\002\000\004\012\uffb5\001\002\000\004\004\uffc6\001\002" +
    "\000\004\061\145\001\002\000\004\023\143\001\002\000" +
    "\022\012\uffaf\047\064\050\066\055\072\056\062\057\071" +
    "\060\065\061\103\001\002\000\024\011\123\035\122\047" +
    "\064\050\066\055\072\056\062\057\071\060\065\061\067" +
    "\001\002\000\020\047\064\050\066\055\072\056\062\057" +
    "\071\060\065\061\067\001\002\000\024\011\123\035\122" +
    "\047\064\050\066\055\072\056\062\057\071\060\065\061" +
    "\067\001\002\000\022\004\uffbf\012\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002\000\020\004" +
    "\uffc3\034\132\035\133\036\134\037\126\040\130\041\131" +
    "\001\002\000\020\047\uffb9\050\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\001\002\000\020\047\064\050\066" +
    "\055\072\056\062\057\071\060\065\061\067\001\002\000" +
    "\020\047\uffb7\050\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\001\002\000\020\047\uffba\050\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\001\002\000\020\047\uffbc" +
    "\050\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\001" +
    "\002\000\020\047\uffbb\050\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\001\002\000\020\047\uffb8\050\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\001\002\000\022" +
    "\004\uffc0\012\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\001\002\000\020\012\137\034\132\035\133" +
    "\036\134\037\126\040\130\041\131\001\002\000\022\004" +
    "\uffbd\012\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\001\002\000\022\004\uffbe\012\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\001\002\000\004" +
    "\012\142\001\002\000\004\004\uffc9\001\002\000\024\011" +
    "\123\035\122\047\064\050\066\055\072\056\062\057\071" +
    "\060\065\061\067\001\002\000\020\004\uffc2\034\132\035" +
    "\133\036\134\037\126\040\130\041\131\001\002\000\004" +
    "\023\146\001\002\000\024\011\123\035\122\047\064\050" +
    "\066\055\072\056\062\057\071\060\065\061\067\001\002" +
    "\000\020\004\uffc1\034\132\035\133\036\134\037\126\040" +
    "\130\041\131\001\002\000\022\005\050\010\uffe1\042\046" +
    "\043\053\051\uffe1\052\044\053\056\061\055\001\002\000" +
    "\006\010\uffe2\051\uffe2\001\002\000\020\047\064\050\066" +
    "\055\072\056\062\057\071\060\065\061\067\001\002\000" +
    "\016\024\200\025\175\026\177\027\174\030\201\031\176" +
    "\001\002\000\010\012\uffdc\032\167\033\171\001\002\000" +
    "\004\012\156\001\002\000\004\007\157\001\002\000\016" +
    "\005\050\042\046\043\053\052\044\053\056\061\055\001" +
    "\002\000\004\010\161\001\002\000\006\004\uffdd\044\162" +
    "\001\002\000\004\007\164\001\002\000\004\004\uffdf\001" +
    "\002\000\016\005\050\042\046\043\053\052\044\053\056" +
    "\061\055\001\002\000\004\010\166\001\002\000\004\004" +
    "\uffde\001\002\000\020\047\uffcc\050\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\001\002\000\020\047\064\050" +
    "\066\055\072\056\062\057\071\060\065\061\067\001\002" +
    "\000\020\047\uffcb\050\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\001\002\000\004\012\uffdb\001\002\000\020" +
    "\047\064\050\066\055\072\056\062\057\071\060\065\061" +
    "\067\001\002\000\020\047\uffd1\050\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\001\002\000\020\047\uffcd\050" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002" +
    "\000\020\047\uffcf\050\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\001\002\000\020\047\uffd2\050\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\061\uffd2\001\002\000\020\047" +
    "\uffce\050\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\001\002\000\020\047\uffd0\050\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\001\002\000\010\012\uffda\032\uffda" +
    "\033\uffda\001\002\000\020\047\064\050\066\055\072\056" +
    "\062\057\071\060\065\061\067\001\002\000\004\004\205" +
    "\001\002\000\004\010\206\001\002\000\006\002\uffe6\015" +
    "\uffe6\001\002\000\004\061\210\001\002\000\004\004\uffb6" +
    "\001\002\000\020\047\064\050\066\055\072\056\062\057" +
    "\071\060\065\061\067\001\002\000\004\012\213\001\002" +
    "\000\004\007\214\001\002\000\016\005\050\042\046\043" +
    "\053\052\044\053\056\061\055\001\002\000\004\010\216" +
    "\001\002\000\004\004\uffe0\001\002\000\016\016\004\017" +
    "\013\020\016\021\010\022\005\054\006\001\002\000\004" +
    "\045\221\001\002\000\020\047\064\050\066\055\072\056" +
    "\062\057\071\060\065\061\067\001\002\000\004\012\223" +
    "\001\002\000\004\004\uffc7\001\002\000\004\002\uffe8\001" +
    "\002\000\004\006\uffff\001\002\000\004\061\232\001\002" +
    "\000\004\004\230\001\002\000\006\005\226\006\ufff1\001" +
    "\002\000\004\006\ufff2\001\002\000\004\007\233\001\002" +
    "\000\014\016\031\017\025\020\030\021\024\022\027\001" +
    "\002\000\004\061\237\001\002\000\004\010\236\001\002" +
    "\000\004\004\ufff0\001\002\000\004\004\240\001\002\000" +
    "\016\010\uffee\016\031\017\025\020\030\021\024\022\027" +
    "\001\002\000\004\010\uffef\001\002\000\006\004\ufffb\045" +
    "\246\001\002\000\004\004\244\001\002\000\034\005\ufffd" +
    "\006\ufffd\016\004\017\013\020\016\021\010\022\005\042" +
    "\ufffd\043\ufffd\052\ufffd\053\ufffd\054\006\061\ufffd\001\002" +
    "\000\020\005\ufffe\006\ufffe\042\ufffe\043\ufffe\052\ufffe\053" +
    "\ufffe\061\ufffe\001\002\000\004\061\242\001\002\000\004" +
    "\004\ufffc\001\002\000\004\002\000\001\002\000\016\016" +
    "\004\017\013\020\016\021\010\022\005\054\006\001\002" +
    "\000\004\045\253\001\002\000\004\055\254\001\002\000" +
    "\004\012\255\001\002\000\006\045\ufff3\061\ufff3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\014\002\006\003\014\026\011\031\010\032" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\242\001\001\000\002\001\001\000\006" +
    "\004\224\005\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\020\007\017\001\001\000\006\006\223" +
    "\007\017\001\001\000\002\001\001\000\006\027\022\041" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\034" +
    "\031\010\034\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\034\031\010\034\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\011\031\010\032\042\001\001\000\016\010\050\011\051" +
    "\012\044\020\053\021\056\023\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\060\036" +
    "\067\040\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\101\036\103\001\001\000\006" +
    "\036\067\040\076\001\001\000\002\001\001\000\004\025" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\105\036\103\001" +
    "\001\000\002\001\001\000\006\035\107\036\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\113\036\067\040\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\140\036\103\001\001\000\010\036\067\037\124" +
    "\040\123\001\001\000\006\036\067\040\137\001\001\000" +
    "\010\036\067\037\135\040\123\001\001\000\002\001\001" +
    "\000\004\022\126\001\001\000\002\001\001\000\006\036" +
    "\067\040\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\067\037\143\040\123\001\001\000\004\022\126" +
    "\001\001\000\002\001\001\000\010\036\067\037\146\040" +
    "\123\001\001\000\004\022\126\001\001\000\016\010\150" +
    "\011\051\012\044\020\053\021\056\023\046\001\001\000" +
    "\002\001\001\000\012\014\154\015\153\036\067\040\152" +
    "\001\001\000\004\016\172\001\001\000\004\017\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\157" +
    "\011\051\012\044\020\053\021\056\023\046\001\001\000" +
    "\002\001\001\000\004\013\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\164\011\051\012\044\020" +
    "\053\021\056\023\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\171\015\153\036" +
    "\067\040\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\067\040\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\067\040\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\211\015\153\036\067\040\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\214\011\051\012" +
    "\044\020\053\021\056\023\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\217\031\010\001\001\000" +
    "\002\001\001\000\006\036\067\040\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\230" +
    "\005\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\233\033\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\233\033\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\011\031\010\032\244\001" +
    "\001\000\002\001\001\000\004\030\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\251\031\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



Yylex analizadorLexico;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		TablaSimbolos tabla = new TablaSimbolos();
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Yylex analizadorLexico= new Yylex(reader,tabla);
		Parser parserObj = new Parser();
		parserObj.analizadorLexico=analizadorLexico;
		parserObj.setScanner(parserObj.analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		System.out.println("Error fatal.");
		}
	}
}

public void error_sintactico(Symbol current_token){
  report_error("Error de sintaxis: linea "+analizadorLexico.linea()+" columna "+analizadorLexico.columna(),current_token);
  
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarations END_STRUCT functions 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= variables structs 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variables ::= type list END_INSTR variables 
            {
              Stack RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
	RESULT = l;
	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	for (int i=0 ;i<l.size();i++){
		String nombre = (String) l.get(i);
		Simbolo aux= tabla.buscar(nombre);
		if(aux == null){
			aux = new Simbolo(nombre, null);
			tabla.insertar(aux);
			aux.setTipo((String)t.peek());
		}else{
			System.out.println("Error, la variable "+ aux.nombre+" ya se ha declarado ");
			 //TODO decir linea y columna
		}
		
	}
	
	System.out.println("Las variables "+l.toString()+ " son del tipo "+t.toString());  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variables ::= 
            {
              Stack RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list ::= ID COMMA list 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			 RESULT =l; RESULT.push(s); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list ::= ID 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			 RESULT = new Stack();RESULT.push(s);
	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              Stack RESULT =null;
		 RESULT = new Stack(); RESULT.push("INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= REAL 
            {
              Stack RESULT =null;
		RESULT = new Stack(); RESULT.push("REAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= CHAR 
            {
              Stack RESULT =null;
		 RESULT = new Stack(); RESULT.push("CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= STRING 
            {
              Stack RESULT =null;
		RESULT = new Stack(); RESULT.push("STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= BOOL 
            {
              Stack RESULT =null;
		 RESULT = new Stack(); RESULT.push("BOOL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= array 
            {
              Stack RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; RESULT.push("ARRAY"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // returntype ::= simpletype 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack tipo = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String) tipo.peek(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("returntype",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // array ::= ARRAY OPEN_PAR type COMMA NUM_INT CLOSE_PAR 
            {
              Stack RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; RESULT.push(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // structs ::= struct END_INSTR structs 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structs ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structs",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // struct ::= STRUCT ID INIT_BLOCK structvars END_BLOCK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
	
	if(tabla.buscarStructDef(s)==null){
		
		StructDefinition def = new StructDefinition(s);
		def.addAttributes(t);
		tabla.addStructDef(def);
	
	}else{
		System.out.println("Error, la struct "+ s+" ya se ha definido ");
	}
	
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // structvars ::= simpletype ID END_INSTR structvars 
            {
              Stack RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	RESULT= stack;
	RESULT.push(t.peek());
	RESULT.push(s);

 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // structvars ::= simpletype ID END_INSTR 
            {
              Stack RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; RESULT.push(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structvars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simpletype ::= INT 
            {
              Stack RESULT =null;
		 RESULT = new Stack(); RESULT.push("INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpletype",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simpletype ::= REAL 
            {
              Stack RESULT =null;
		RESULT = new Stack(); RESULT.push("REAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpletype",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simpletype ::= CHAR 
            {
              Stack RESULT =null;
		 RESULT = new Stack(); RESULT.push("CHAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpletype",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simpletype ::= STRING 
            {
              Stack RESULT =null;
		RESULT = new Stack(); RESULT.push("STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpletype",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simpletype ::= BOOL 
            {
              Stack RESULT =null;
		 RESULT = new Stack(); RESULT.push("BOOL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpletype",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // functions ::= function functions 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // functions ::= function 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function ::= FUNCTION returntype ID OPEN_PAR params CLOSE_PAR INIT_BLOCK variables instructions RETURN id END_INSTR END_BLOCK 
            {
              Object RESULT =null;
		int tipo1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tipo1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String tipo1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
			  			 
 			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
 			if(tabla.buscarGlobal(s)==null){
 				if(!tabla.isAssignable(tipo1, tipo2)){
 					System.out.println("Error, la función "+s+" debe de retornar un valor "+
 					"de tipo "+tipo1+" y está retornando un valor de tipo "+tipo2);
 				}else{
 					Simbolo function = new Simbolo(s, null);
	 				function.setTipo("FUNCTION");
	 				for (int i=l.size()-1 ;i>-1;i--){
						function.addParamType((String)l.get(i));
					}
					tabla.insertar(function);
					function.setTipo("FUNCTION");
					function.setTipoRetorno(tipo1);
 				}
 				
 			}else{
 				System.out.println("Error, ya se ha declarado la función "+ s);
 			}
			

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // params ::= type ID COMMA params 
            {
              Stack RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack l = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = l; RESULT.push(t.peek()); 
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params ::= type ID 
            {
              Stack RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack t = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		   		RESULT = new Stack(); RESULT.push(t.peek());
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= 
            {
              Stack RESULT =null;
		 
		   		RESULT = new Stack();
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instructions ::= expression END_INSTR instructions 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instructions ::= expression END_INSTR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // loop ::= WHILE OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if ::= IF OPEN_PAR conditions CLOSE_PAR INIT_BLOCK instructions END_BLOCK else 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // else ::= ELSE INIT_BLOCK instructions END_BLOCK 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // else ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conditions ::= condition 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // conditions ::= condition logic_operator conditions 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditions",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condition ::= id validate_operator id 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // id ::= ID 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo=tabla.buscarGlobal(s);
			
			if(simbolo==null){
				System.out.println("Error, la variable "+s+" no se ha declarado");
			}else{
				RESULT= simbolo.getTipo();
			}
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // id ::= literal 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			
			RESULT = tipo;
		
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // id ::= ID POINT ID 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String att = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
			TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo=tabla.buscarGlobal(s);
			
			if(simbolo==null){
				System.out.println("Error, la variable "+s+" no se ha declarado");
			}else{
				StructDefinition def =simbolo.getStructInstance().getStructDef();
				String attType= def.getTipoOf(att);
				if(attType==null){
					System.out.println("La variable de tipo struct "+s+
					" no tiene ningún atributo "+att);
				}else{
					RESULT= attType;
				}
				
			}	
			//TO DO RESULT= tipo de id.id
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id ::= ID OPEN_PAR arg_list CLOSE_PAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack tipos = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
				Simbolo function=tabla.buscarGlobal(s);
				
	 			if(function==null){
					System.out.println("Error, la función "+s+" no existe");	
				}else if(!function.getTipo().equals("FUNCTION")){
					System.out.println("Error, "+s+" no es una función");
				}else{
					List<String> expectedTipos = function.getParamTypes();
					if(expectedTipos.size()!=tipos.size()){
						System.out.println("Error, la función "+s+" espera "+expectedTipos.size()+
						" parámetros");
					}
					for(int i=tipos.size()-1; i>-1;i--){
						if(!expectedTipos.get(tipos.size()-1-i).equals(tipos.get(i))){
							System.out.println("Error, el parametro "+(tipos.size()-1-i)+
							"de la funcion "+ s+" ha de ser de tipo "+
							expectedTipos.get(tipos.size()-i));
						}
					}
				}
				
				RESULT = function.getTipoRetorno();
				
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // id ::= ID index 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
			Simbolo simbolo = tabla.buscarGlobal(s);
			
 			if(simbolo==null){
				System.out.println("Error, la variable "+s+" no existe");	
			}else{
				RESULT= simbolo.getTipo();
			}
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // index ::= OPEN_BRACKETS id CLOSE_BRACKETS index 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // index ::= OPEN_BRACKETS id CLOSE_BRACKETS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // validate_operator ::= EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // validate_operator ::= NOT_EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // validate_operator ::= LESS_EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // validate_operator ::= GREATER_EQUAL 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // validate_operator ::= LESS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // validate_operator ::= GREATER 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("validate_operator",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logic_operator ::= AND 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logic_operator ::= OR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logic_operator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= assign 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= ID OPEN_PAR arg_list CLOSE_PAR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stack tipos = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo function=tabla.buscarGlobal(s);
					
		 			if(function==null){
						System.out.println("Error, la función "+s+" no existe");	
					}else if(!function.getTipo().equals("FUNCTION")){
						System.out.println("Error, "+s+" no es una función");
					}else{
						List<String> expectedTipos = function.getParamTypes();
						if(expectedTipos.size()!=tipos.size()){
							System.out.println("Error, la función "+s+" espera "+expectedTipos.size()+
							" parámetros");
						}
						for(int i=tipos.size()-1; i>-1;i--){
							if(!expectedTipos.get(tipos.size()-1-i).equals(tipos.get(i))){
								System.out.println("Error, el parametro "+(tipos.size()-i)+
								" de la funcion "+ s+" ha de ser de tipo "+
								expectedTipos.get(tipos.size()-1-i));
							}
						}
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= create_struct 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= READ OPEN_PAR type COMMA id CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= PRINT OPEN_PAR print CLOSE_PAR 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= loop 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= if 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assign ::= ID ASSIGN numeric_expr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				
				TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo simbolo=tabla.buscarGlobal(s);
				
				if(simbolo==null){
					System.out.println("Error, la variable "+s+" no existe");
				}else{
					String expectedTipo = simbolo.getTipo();
					if(!tabla.isAssignable(expectedTipo,tipo)){
						System.out.println("Error, no se puede asignar una variable de tipo "+
						tipo+" a una variable de tipo "+expectedTipo);
					}
				}
				
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assign ::= ID index ASSIGN numeric_expr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   		
		   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					Simbolo simbolo=tabla.buscarGlobal(s);
				
				if(simbolo==null){
					System.out.println("Error, la variable "+s+" no existe");
				}else{
					String expectedTipo = simbolo.getTipo();
					if(tabla.isAssignable(expectedTipo,tipo)){
						System.out.println("Error, no se ha puede asignar una variable de tipo "+
						tipo+" a una variable de tipo "+expectedTipo);
					}
				}
				
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assign ::= ID POINT ID ASSIGN numeric_expr 
            {
              Object RESULT =null;
		int sStructleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sStructright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String sStruct = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int attNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String attName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   
		   		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		   		Simbolo struct = tabla.buscarGlobal(sStruct);
		   		if(struct==null){
		   			System.out.println("Error, no ha creado ninguna struct de nombre "+sStruct);
		   		}else{
		   			StructDefinition def = struct.getStructInstance().getStructDef();
		   			String attTipo = def.getTipoOf(attName);
		   			if(attTipo==null){
		   				System.out.println("La struct "+sStruct+" no tiene ningún atributo de nombre "+
		   				attName);
		   			}else if(tabla.isAssignable(attTipo, tipo)){
						RESULT = attTipo;
		   			}else{
		   				System.out.println("Error, no se puede asignar una variable de tipo "+
		   				tipo+" a un atributo de una struct de tipo "+attTipo);
		   			}
		   			
		   		}
		   		
		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // numeric_expr ::= numeric_expr operator id 
            {
              String RESULT =null;
		int tipo1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipo1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tipo1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					
					if( !tabla.isNumeric(tipo1) && !tabla.isNumeric(tipo2) ){
						System.out.println("Error, las operaciones matemáticas han de ser"+
						" entre tipos REAL o INT. No se puede operar el tipo "+tipo1+
						" con el tipo "+tipo2);	
					}else{
					
						if(tipo1.equals("REAL") || tipo2.equals("REAL") ){
							RESULT= "REAL";
						}else{
							RESULT = "INT";
						}
					}
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // numeric_expr ::= id 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				 	RESULT=tipo;
				 	
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // numeric_expr ::= MINUS id 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				 	RESULT= tipo;
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // numeric_expr ::= OPEN_PAR numeric_expr CLOSE_PAR 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				 	RESULT= tipo;
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operator ::= PLUS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operator ::= MINUS 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operator ::= POW 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operator ::= MOD 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operator ::= DIV 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operator ::= MULT 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // create_struct ::= STRUCT ID ID 
            {
              Object RESULT =null;
		int structDefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int structDefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String structDef = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				
					TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
					StructDefinition def = tabla.buscarStructDef(structDef);
					
					if(def==null){
						System.out.println("Error, no se ha definido un struct de nombre "+structDef);
					}else{
						Simbolo simbolo = new Simbolo(s, null);
						simbolo.createStructInstance(def);
						simbolo.setTipo("STRUCT");
						tabla.insertar(simbolo);
					}
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("create_struct",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // print ::= id COMMA print 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // print ::= id 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arg_list ::= ID COMMA arg_list 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	
		RESULT= stack; 
		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		Simbolo simbolo=tabla.buscarGlobal(s);
				
	 	if(simbolo==null){
			System.out.println("Error, la variable "+s+" no se ha declarado");	
		}else{
			RESULT.push(simbolo.getTipo());		
		}
	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arg_list ::= literal COMMA arg_list 
            {
              Stack RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stack stack = (Stack)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

		RESULT= stack; 
		RESULT.push(l);		
		
		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arg_list ::= ID 
            {
              Stack RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	
		RESULT = new Stack();
		TablaSimbolos tabla = this.parser.analizadorLexico.getTabla();
		Simbolo simbolo=tabla.buscarGlobal(s);
				
	 	if(simbolo==null){
			System.out.println("Error, la variable "+s+" no se ha declarado");	
		}else{
			RESULT.push(simbolo.getTipo());		
		}
	 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arg_list ::= literal 
            {
              Stack RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	 
		RESULT = new Stack();
		RESULT.push(l);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arg_list ::= 
            {
              Stack RESULT =null;
		 
		RESULT = new Stack();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= NUM_INT 
            {
              String RESULT =null;
		 RESULT="INT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= NUM_REAL 
            {
              String RESULT =null;
		 RESULT= "REAL"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal ::= CHAR_LITERAL 
            {
              String RESULT =null;
		 RESULT= "CHAR"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal ::= STRING_LITERAL 
            {
              String RESULT =null;
		 RESULT= "STRING"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal ::= TRUE 
            {
              String RESULT =null;
		 RESULT="BOOL"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= FALSE 
            {
              String RESULT =null;
		 RESULT= "BOOL"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
