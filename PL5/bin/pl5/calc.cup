package pl5;
import java_cup.runtime.*;
import java.io.*;

parser code {:
public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
	try {
		java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
	    java.io.Reader reader = new java.io.InputStreamReader(stream);
		Scanner analizadorLexico= new Yylex(reader);
		Parser parserObj = new Parser();
		parserObj.setScanner(analizadorLexico);
		parserObj.parse();
		}
		catch(Exception x) {
		System.out.println("Error fatal.");
		}
	}
}
:};


/*Inicializacion del analizador lexico si procede*/
//init with {: s.init(); :};
/*Siguiente token al lexico*/
//scan with {: return this.getScanner().next_token(); :};

/*Terminales tokens que puede devolver el lexico*/
terminal PTOYCOMA,MAS,MENOS,POR,ENTRE,POW,ABREPAR,CIERRAPAR,UMENOS;

/*Terminales con atributo*/
terminal Integer NUM;
terminal Integer ID;
/* No terminales sin atributo*/
non terminal listaexpr;

/* No terminales con atributo*/
non terminal Integer expr;

/*Precedencias*/
precedence left MAS,MENOS;
precedence left POR,ENTRE;
precedence left UMENOS;
precedence right POW;

/*Gramatica*/

	/**Producciones
	*
	* S-> E;
	* E-> TE'
	* E'-> +TE' | -TE' | ε
	* T-> PT'
	* T'-> *PT' | /PT' | ε
	* P-> FP'
	* P'-> ^FP'| ε
	* F-> (E) | id | num
	* 
	*
	* E = E+E|E-E|E*E|E/E|E^E|(E)|id|num|-E
	**/
	
listaexpr ::= listaexpr expr:e PTOYCOMA {: System.out.println("= " + e); :}
|
;
expr ::= expr:e1 MAS expr:e2
{: RESULT= new Integer(e1.intValue() + e2.intValue()); :}
| expr:e1 MENOS expr:e2
{: RESULT= new Integer(e1.intValue() - e2.intValue()); :}
| expr:e1 POR expr:e2
{: RESULT= new Integer(e1.intValue() * e2.intValue()); :}
| expr:e1 ENTRE expr:e2
{: RESULT= new Integer(e1.intValue() / e2.intValue()); :}
| expr:e1 POW expr:e2
{: RESULT= new Integer((int)Math.pow(e1.intValue(),e2.intValue())); :} %prec POW
| NUM:n
{: RESULT=n; :}
| ID:id
{: RESULT=id.intValue(); :}
| MENOS expr:e
{: RESULT= new Integer(0-e.intValue()); :} %prec UMENOS
| ABREPAR expr:e CIERRAPAR
{: RESULT=e; :}
;
	